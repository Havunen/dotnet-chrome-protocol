// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class Storage
  {
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SerializedStorageKeyType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Enum of possible storage types.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record StorageTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Usage for a storage type.</summary>
    /// <param name="StorageType">Name of storage type.</param>
    /// <param name="Usage">Storage usage (bytes).</param>
    public record UsageForTypeType(
      [property: Newtonsoft.Json.JsonProperty("storageType")]
      ChromeProtocol.Domains.Storage.StorageTypeType StorageType,
      [property: Newtonsoft.Json.JsonProperty("usage")]
      double Usage
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Pair of issuer origin and number of available (signed, but not used) Trust<br/>
    /// Tokens from that issuer.<br/>
    /// </summary>
    public record TrustTokensType(
      [property: Newtonsoft.Json.JsonProperty("issuerOrigin")]
      string IssuerOrigin,
      [property: Newtonsoft.Json.JsonProperty("count")]
      double Count
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Protected audience interest group auction identifier.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record InterestGroupAuctionIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Enum of interest group access types.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record InterestGroupAccessTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Enum of auction events.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record InterestGroupAuctionEventTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Enum of network fetches auctions can do.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record InterestGroupAuctionFetchTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Ad advertising element inside an interest group.</summary>
    public record InterestGroupAdType(
      [property: Newtonsoft.Json.JsonProperty("renderURL")]
      string RenderURL,
      [property: Newtonsoft.Json.JsonProperty("metadata")]
      string? Metadata = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>The full details of an interest group.</summary>
    public record InterestGroupDetailsType(
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin,
      [property: Newtonsoft.Json.JsonProperty("name")]
      string Name,
      [property: Newtonsoft.Json.JsonProperty("expirationTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType ExpirationTime,
      [property: Newtonsoft.Json.JsonProperty("joiningOrigin")]
      string JoiningOrigin,
      [property: Newtonsoft.Json.JsonProperty("trustedBiddingSignalsKeys")]
      System.Collections.Generic.IReadOnlyList<string> TrustedBiddingSignalsKeys,
      [property: Newtonsoft.Json.JsonProperty("ads")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.InterestGroupAdType> Ads,
      [property: Newtonsoft.Json.JsonProperty("adComponents")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.InterestGroupAdType> AdComponents,
      [property: Newtonsoft.Json.JsonProperty("biddingLogicURL")]
      string? BiddingLogicURL = default,
      [property: Newtonsoft.Json.JsonProperty("biddingWasmHelperURL")]
      string? BiddingWasmHelperURL = default,
      [property: Newtonsoft.Json.JsonProperty("updateURL")]
      string? UpdateURL = default,
      [property: Newtonsoft.Json.JsonProperty("trustedBiddingSignalsURL")]
      string? TrustedBiddingSignalsURL = default,
      [property: Newtonsoft.Json.JsonProperty("userBiddingSignals")]
      string? UserBiddingSignals = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enum of shared storage access types.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SharedStorageAccessTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Struct for a single key-value pair in an origin&#39;s shared storage.</summary>
    public record SharedStorageEntryType(
      [property: Newtonsoft.Json.JsonProperty("key")]
      string Key,
      [property: Newtonsoft.Json.JsonProperty("value")]
      string Value
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Details for an origin&#39;s shared storage.</summary>
    /// <param name="CreationTime">Time when the origin&#39;s shared storage was last created.</param>
    /// <param name="Length">Number of key-value pairs stored in origin&#39;s shared storage.</param>
    /// <param name="RemainingBudget">Current amount of bits of entropy remaining in the navigation budget.</param>
    /// <param name="BytesUsed">
    /// Total number of bytes stored as key-value pairs in origin&#39;s shared<br/>
    /// storage.<br/>
    /// </param>
    public record SharedStorageMetadataType(
      [property: Newtonsoft.Json.JsonProperty("creationTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType CreationTime,
      [property: Newtonsoft.Json.JsonProperty("length")]
      int Length,
      [property: Newtonsoft.Json.JsonProperty("remainingBudget")]
      double RemainingBudget,
      [property: Newtonsoft.Json.JsonProperty("bytesUsed")]
      int BytesUsed
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Pair of reporting metadata details for a candidate URL for `selectURL()`.</summary>
    public record SharedStorageReportingMetadataType(
      [property: Newtonsoft.Json.JsonProperty("eventType")]
      string EventType,
      [property: Newtonsoft.Json.JsonProperty("reportingUrl")]
      string ReportingUrl
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Bundles a candidate URL with its reporting metadata.</summary>
    /// <param name="Url">Spec of candidate URL.</param>
    /// <param name="ReportingMetadata">Any associated reporting metadata.</param>
    public record SharedStorageUrlWithMetadataType(
      [property: Newtonsoft.Json.JsonProperty("url")]
      string Url,
      [property: Newtonsoft.Json.JsonProperty("reportingMetadata")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.SharedStorageReportingMetadataType> ReportingMetadata
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Bundles the parameters for shared storage access events whose<br/>
    /// presence/absence can vary according to SharedStorageAccessType.<br/>
    /// </summary>
    /// <param name="ScriptSourceUrl">
    /// Spec of the module script URL.<br/>
    /// Present only for SharedStorageAccessType.documentAddModule.<br/>
    /// </param>
    /// <param name="OperationName">
    /// Name of the registered operation to be run.<br/>
    /// Present only for SharedStorageAccessType.documentRun and<br/>
    /// SharedStorageAccessType.documentSelectURL.<br/>
    /// </param>
    /// <param name="SerializedData">
    /// The operation&#39;s serialized data in bytes (converted to a string).<br/>
    /// Present only for SharedStorageAccessType.documentRun and<br/>
    /// SharedStorageAccessType.documentSelectURL.<br/>
    /// </param>
    /// <param name="UrlsWithMetadata">
    /// Array of candidate URLs&#39; specs, along with any associated metadata.<br/>
    /// Present only for SharedStorageAccessType.documentSelectURL.<br/>
    /// </param>
    /// <param name="Key">
    /// Key for a specific entry in an origin&#39;s shared storage.<br/>
    /// Present only for SharedStorageAccessType.documentSet,<br/>
    /// SharedStorageAccessType.documentAppend,<br/>
    /// SharedStorageAccessType.documentDelete,<br/>
    /// SharedStorageAccessType.workletSet,<br/>
    /// SharedStorageAccessType.workletAppend,<br/>
    /// SharedStorageAccessType.workletDelete, and<br/>
    /// SharedStorageAccessType.workletGet.<br/>
    /// </param>
    /// <param name="Value">
    /// Value for a specific entry in an origin&#39;s shared storage.<br/>
    /// Present only for SharedStorageAccessType.documentSet,<br/>
    /// SharedStorageAccessType.documentAppend,<br/>
    /// SharedStorageAccessType.workletSet, and<br/>
    /// SharedStorageAccessType.workletAppend.<br/>
    /// </param>
    /// <param name="IgnoreIfPresent">
    /// Whether or not to set an entry for a key if that key is already present.<br/>
    /// Present only for SharedStorageAccessType.documentSet and<br/>
    /// SharedStorageAccessType.workletSet.<br/>
    /// </param>
    public record SharedStorageAccessParamsType(
      [property: Newtonsoft.Json.JsonProperty("scriptSourceUrl")]
      string? ScriptSourceUrl = default,
      [property: Newtonsoft.Json.JsonProperty("operationName")]
      string? OperationName = default,
      [property: Newtonsoft.Json.JsonProperty("serializedData")]
      string? SerializedData = default,
      [property: Newtonsoft.Json.JsonProperty("urlsWithMetadata")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.SharedStorageUrlWithMetadataType>? UrlsWithMetadata = default,
      [property: Newtonsoft.Json.JsonProperty("key")]
      string? Key = default,
      [property: Newtonsoft.Json.JsonProperty("value")]
      string? Value = default,
      [property: Newtonsoft.Json.JsonProperty("ignoreIfPresent")]
      bool? IgnoreIfPresent = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record StorageBucketsDurabilityType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <param name="Name">If not specified, it is the default bucket of the storageKey.</param>
    public record StorageBucketType(
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      ChromeProtocol.Domains.Storage.SerializedStorageKeyType StorageKey,
      [property: Newtonsoft.Json.JsonProperty("name")]
      string? Name = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Quota">Storage quota (bytes).</param>
    public record StorageBucketInfoType(
      [property: Newtonsoft.Json.JsonProperty("bucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType Bucket,
      [property: Newtonsoft.Json.JsonProperty("id")]
      string Id,
      [property: Newtonsoft.Json.JsonProperty("expiration")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType Expiration,
      [property: Newtonsoft.Json.JsonProperty("quota")]
      double Quota,
      [property: Newtonsoft.Json.JsonProperty("persistent")]
      bool Persistent,
      [property: Newtonsoft.Json.JsonProperty("durability")]
      ChromeProtocol.Domains.Storage.StorageBucketsDurabilityType Durability
    ) : ChromeProtocol.Core.IType
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AttributionReportingSourceTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record UnsignedInt64AsBase10Type(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record UnsignedInt128AsBase16Type(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record SignedInt64AsBase10Type(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    public record AttributionReportingFilterDataEntryType(
      [property: Newtonsoft.Json.JsonProperty("key")]
      string Key,
      [property: Newtonsoft.Json.JsonProperty("values")]
      System.Collections.Generic.IReadOnlyList<string> Values
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="LookbackWindow">duration in seconds</param>
    public record AttributionReportingFilterConfigType(
      [property: Newtonsoft.Json.JsonProperty("filterValues")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingFilterDataEntryType> FilterValues,
      [property: Newtonsoft.Json.JsonProperty("lookbackWindow")]
      int? LookbackWindow = default
    ) : ChromeProtocol.Core.IType
    {
    }
    public record AttributionReportingFilterPairType(
      [property: Newtonsoft.Json.JsonProperty("filters")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingFilterConfigType> Filters,
      [property: Newtonsoft.Json.JsonProperty("notFilters")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingFilterConfigType> NotFilters
    ) : ChromeProtocol.Core.IType
    {
    }
    public record AttributionReportingAggregationKeysEntryType(
      [property: Newtonsoft.Json.JsonProperty("key")]
      string Key,
      [property: Newtonsoft.Json.JsonProperty("value")]
      ChromeProtocol.Domains.Storage.UnsignedInt128AsBase16Type Value
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="Start">duration in seconds</param>
    /// <param name="Ends">duration in seconds</param>
    public record AttributionReportingEventReportWindowsType(
      [property: Newtonsoft.Json.JsonProperty("start")]
      int Start,
      [property: Newtonsoft.Json.JsonProperty("ends")]
      System.Collections.Generic.IReadOnlyList<int> Ends
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <param name="TriggerData">
    /// number instead of integer because not all uint32 can be represented by<br/>
    /// int<br/>
    /// </param>
    public record AttributionReportingTriggerSpecType(
      [property: Newtonsoft.Json.JsonProperty("triggerData")]
      System.Collections.Generic.IReadOnlyList<double> TriggerData,
      [property: Newtonsoft.Json.JsonProperty("eventReportWindows")]
      ChromeProtocol.Domains.Storage.AttributionReportingEventReportWindowsType EventReportWindows
    ) : ChromeProtocol.Core.IType
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AttributionReportingTriggerDataMatchingType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <param name="Expiry">duration in seconds</param>
    /// <param name="AggregatableReportWindow">duration in seconds</param>
    public record AttributionReportingSourceRegistrationType(
      [property: Newtonsoft.Json.JsonProperty("time")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType Time,
      [property: Newtonsoft.Json.JsonProperty("expiry")]
      int Expiry,
      [property: Newtonsoft.Json.JsonProperty("triggerSpecs")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingTriggerSpecType> TriggerSpecs,
      [property: Newtonsoft.Json.JsonProperty("aggregatableReportWindow")]
      int AggregatableReportWindow,
      [property: Newtonsoft.Json.JsonProperty("type")]
      ChromeProtocol.Domains.Storage.AttributionReportingSourceTypeType Type,
      [property: Newtonsoft.Json.JsonProperty("sourceOrigin")]
      string SourceOrigin,
      [property: Newtonsoft.Json.JsonProperty("reportingOrigin")]
      string ReportingOrigin,
      [property: Newtonsoft.Json.JsonProperty("destinationSites")]
      System.Collections.Generic.IReadOnlyList<string> DestinationSites,
      [property: Newtonsoft.Json.JsonProperty("eventId")]
      ChromeProtocol.Domains.Storage.UnsignedInt64AsBase10Type EventId,
      [property: Newtonsoft.Json.JsonProperty("priority")]
      ChromeProtocol.Domains.Storage.SignedInt64AsBase10Type Priority,
      [property: Newtonsoft.Json.JsonProperty("filterData")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingFilterDataEntryType> FilterData,
      [property: Newtonsoft.Json.JsonProperty("aggregationKeys")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingAggregationKeysEntryType> AggregationKeys,
      [property: Newtonsoft.Json.JsonProperty("triggerDataMatching")]
      ChromeProtocol.Domains.Storage.AttributionReportingTriggerDataMatchingType TriggerDataMatching,
      [property: Newtonsoft.Json.JsonProperty("debugKey")]
      ChromeProtocol.Domains.Storage.UnsignedInt64AsBase10Type? DebugKey = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AttributionReportingSourceRegistrationResultType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AttributionReportingSourceRegistrationTimeConfigType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <param name="Value">
    /// number instead of integer because not all uint32 can be represented by<br/>
    /// int<br/>
    /// </param>
    public record AttributionReportingAggregatableValueDictEntryType(
      [property: Newtonsoft.Json.JsonProperty("key")]
      string Key,
      [property: Newtonsoft.Json.JsonProperty("value")]
      double Value
    ) : ChromeProtocol.Core.IType
    {
    }
    public record AttributionReportingAggregatableValueEntryType(
      [property: Newtonsoft.Json.JsonProperty("values")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingAggregatableValueDictEntryType> Values,
      [property: Newtonsoft.Json.JsonProperty("filters")]
      ChromeProtocol.Domains.Storage.AttributionReportingFilterPairType Filters
    ) : ChromeProtocol.Core.IType
    {
    }
    public record AttributionReportingEventTriggerDataType(
      [property: Newtonsoft.Json.JsonProperty("data")]
      ChromeProtocol.Domains.Storage.UnsignedInt64AsBase10Type Data,
      [property: Newtonsoft.Json.JsonProperty("priority")]
      ChromeProtocol.Domains.Storage.SignedInt64AsBase10Type Priority,
      [property: Newtonsoft.Json.JsonProperty("filters")]
      ChromeProtocol.Domains.Storage.AttributionReportingFilterPairType Filters,
      [property: Newtonsoft.Json.JsonProperty("dedupKey")]
      ChromeProtocol.Domains.Storage.UnsignedInt64AsBase10Type? DedupKey = default
    ) : ChromeProtocol.Core.IType
    {
    }
    public record AttributionReportingAggregatableTriggerDataType(
      [property: Newtonsoft.Json.JsonProperty("keyPiece")]
      ChromeProtocol.Domains.Storage.UnsignedInt128AsBase16Type KeyPiece,
      [property: Newtonsoft.Json.JsonProperty("sourceKeys")]
      System.Collections.Generic.IReadOnlyList<string> SourceKeys,
      [property: Newtonsoft.Json.JsonProperty("filters")]
      ChromeProtocol.Domains.Storage.AttributionReportingFilterPairType Filters
    ) : ChromeProtocol.Core.IType
    {
    }
    public record AttributionReportingAggregatableDedupKeyType(
      [property: Newtonsoft.Json.JsonProperty("filters")]
      ChromeProtocol.Domains.Storage.AttributionReportingFilterPairType Filters,
      [property: Newtonsoft.Json.JsonProperty("dedupKey")]
      ChromeProtocol.Domains.Storage.UnsignedInt64AsBase10Type? DedupKey = default
    ) : ChromeProtocol.Core.IType
    {
    }
    public record AttributionReportingTriggerRegistrationType(
      [property: Newtonsoft.Json.JsonProperty("filters")]
      ChromeProtocol.Domains.Storage.AttributionReportingFilterPairType Filters,
      [property: Newtonsoft.Json.JsonProperty("aggregatableDedupKeys")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingAggregatableDedupKeyType> AggregatableDedupKeys,
      [property: Newtonsoft.Json.JsonProperty("eventTriggerData")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingEventTriggerDataType> EventTriggerData,
      [property: Newtonsoft.Json.JsonProperty("aggregatableTriggerData")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingAggregatableTriggerDataType> AggregatableTriggerData,
      [property: Newtonsoft.Json.JsonProperty("aggregatableValues")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.AttributionReportingAggregatableValueEntryType> AggregatableValues,
      [property: Newtonsoft.Json.JsonProperty("debugReporting")]
      bool DebugReporting,
      [property: Newtonsoft.Json.JsonProperty("sourceRegistrationTimeConfig")]
      ChromeProtocol.Domains.Storage.AttributionReportingSourceRegistrationTimeConfigType SourceRegistrationTimeConfig,
      [property: Newtonsoft.Json.JsonProperty("debugKey")]
      ChromeProtocol.Domains.Storage.UnsignedInt64AsBase10Type? DebugKey = default,
      [property: Newtonsoft.Json.JsonProperty("aggregationCoordinatorOrigin")]
      string? AggregationCoordinatorOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("triggerContextId")]
      string? TriggerContextId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AttributionReportingEventLevelResultType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record AttributionReportingAggregatableResultType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>A cache&#39;s contents have been modified.</summary>
    /// <param name="Origin">Origin to update.</param>
    /// <param name="StorageKey">Storage key to update.</param>
    /// <param name="BucketId">Storage bucket to update.</param>
    /// <param name="CacheName">Name of cache in origin.</param>
    [ChromeProtocol.Core.MethodName("Storage.cacheStorageContentUpdated")]
    public record CacheStorageContentUpdated(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey,
      [property: Newtonsoft.Json.JsonProperty("bucketId")]
      string BucketId,
      [property: Newtonsoft.Json.JsonProperty("cacheName")]
      string CacheName
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>A cache has been added/deleted.</summary>
    /// <param name="Origin">Origin to update.</param>
    /// <param name="StorageKey">Storage key to update.</param>
    /// <param name="BucketId">Storage bucket to update.</param>
    [ChromeProtocol.Core.MethodName("Storage.cacheStorageListUpdated")]
    public record CacheStorageListUpdated(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey,
      [property: Newtonsoft.Json.JsonProperty("bucketId")]
      string BucketId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>The origin&#39;s IndexedDB object store has been modified.</summary>
    /// <param name="Origin">Origin to update.</param>
    /// <param name="StorageKey">Storage key to update.</param>
    /// <param name="BucketId">Storage bucket to update.</param>
    /// <param name="DatabaseName">Database to update.</param>
    /// <param name="ObjectStoreName">ObjectStore to update.</param>
    [ChromeProtocol.Core.MethodName("Storage.indexedDBContentUpdated")]
    public record IndexedDBContentUpdated(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey,
      [property: Newtonsoft.Json.JsonProperty("bucketId")]
      string BucketId,
      [property: Newtonsoft.Json.JsonProperty("databaseName")]
      string DatabaseName,
      [property: Newtonsoft.Json.JsonProperty("objectStoreName")]
      string ObjectStoreName
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>The origin&#39;s IndexedDB database list has been modified.</summary>
    /// <param name="Origin">Origin to update.</param>
    /// <param name="StorageKey">Storage key to update.</param>
    /// <param name="BucketId">Storage bucket to update.</param>
    [ChromeProtocol.Core.MethodName("Storage.indexedDBListUpdated")]
    public record IndexedDBListUpdated(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey,
      [property: Newtonsoft.Json.JsonProperty("bucketId")]
      string BucketId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// One of the interest groups was accessed. Note that these events are global<br/>
    /// to all targets sharing an interest group store.<br/>
    /// </summary>
    /// <param name="ComponentSellerOrigin">
    /// For topLevelBid/topLevelAdditionalBid, and when appropriate,<br/>
    /// win and additionalBidWin<br/>
    /// </param>
    /// <param name="Bid">For bid or somethingBid event, if done locally and not on a server.</param>
    /// <param name="UniqueAuctionId">For non-global events --- links to interestGroupAuctionEvent</param>
    [ChromeProtocol.Core.MethodName("Storage.interestGroupAccessed")]
    public record InterestGroupAccessed(
      [property: Newtonsoft.Json.JsonProperty("accessTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType AccessTime,
      [property: Newtonsoft.Json.JsonProperty("type")]
      ChromeProtocol.Domains.Storage.InterestGroupAccessTypeType Type,
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin,
      [property: Newtonsoft.Json.JsonProperty("name")]
      string Name,
      [property: Newtonsoft.Json.JsonProperty("componentSellerOrigin")]
      string? ComponentSellerOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("bid")]
      double? Bid = default,
      [property: Newtonsoft.Json.JsonProperty("bidCurrency")]
      string? BidCurrency = default,
      [property: Newtonsoft.Json.JsonProperty("uniqueAuctionId")]
      ChromeProtocol.Domains.Storage.InterestGroupAuctionIdType? UniqueAuctionId = default
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// An auction involving interest groups is taking place. These events are<br/>
    /// target-specific.<br/>
    /// </summary>
    /// <param name="ParentAuctionId">Set for child auctions.</param>
    /// <param name="AuctionConfig">Set for started and configResolved</param>
    [ChromeProtocol.Core.MethodName("Storage.interestGroupAuctionEventOccurred")]
    public record InterestGroupAuctionEventOccurred(
      [property: Newtonsoft.Json.JsonProperty("eventTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType EventTime,
      [property: Newtonsoft.Json.JsonProperty("type")]
      ChromeProtocol.Domains.Storage.InterestGroupAuctionEventTypeType Type,
      [property: Newtonsoft.Json.JsonProperty("uniqueAuctionId")]
      ChromeProtocol.Domains.Storage.InterestGroupAuctionIdType UniqueAuctionId,
      [property: Newtonsoft.Json.JsonProperty("parentAuctionId")]
      ChromeProtocol.Domains.Storage.InterestGroupAuctionIdType? ParentAuctionId = default,
      [property: Newtonsoft.Json.JsonProperty("auctionConfig")]
      Newtonsoft.Json.Linq.JObject? AuctionConfig = default
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Specifies which auctions a particular network fetch may be related to, and<br/>
    /// in what role. Note that it is not ordered with respect to<br/>
    /// Network.requestWillBeSent (but will happen before loadingFinished<br/>
    /// loadingFailed).<br/>
    /// </summary>
    /// <param name="Auctions">
    /// This is the set of the auctions using the worklet that issued this<br/>
    /// request.  In the case of trusted signals, it&#39;s possible that only some of<br/>
    /// them actually care about the keys being queried.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Storage.interestGroupAuctionNetworkRequestCreated")]
    public record InterestGroupAuctionNetworkRequestCreated(
      [property: Newtonsoft.Json.JsonProperty("type")]
      ChromeProtocol.Domains.Storage.InterestGroupAuctionFetchTypeType Type,
      [property: Newtonsoft.Json.JsonProperty("requestId")]
      ChromeProtocol.Domains.Network.RequestIdType RequestId,
      [property: Newtonsoft.Json.JsonProperty("auctions")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.InterestGroupAuctionIdType> Auctions
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>
    /// Shared storage was accessed by the associated page.<br/>
    /// The following parameters are included in all events.<br/>
    /// </summary>
    /// <param name="AccessTime">Time of the access.</param>
    /// <param name="Type">Enum value indicating the Shared Storage API method invoked.</param>
    /// <param name="MainFrameId">DevTools Frame Token for the primary frame tree&#39;s root.</param>
    /// <param name="OwnerOrigin">Serialized origin for the context that invoked the Shared Storage API.</param>
    /// <param name="Params">
    /// The sub-parameters wrapped by `params` are all optional and their<br/>
    /// presence/absence depends on `type`.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Storage.sharedStorageAccessed")]
    public record SharedStorageAccessed(
      [property: Newtonsoft.Json.JsonProperty("accessTime")]
      ChromeProtocol.Domains.Network.TimeSinceEpochType AccessTime,
      [property: Newtonsoft.Json.JsonProperty("type")]
      ChromeProtocol.Domains.Storage.SharedStorageAccessTypeType Type,
      [property: Newtonsoft.Json.JsonProperty("mainFrameId")]
      ChromeProtocol.Domains.Page.FrameIdType MainFrameId,
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin,
      [property: Newtonsoft.Json.JsonProperty("params")]
      ChromeProtocol.Domains.Storage.SharedStorageAccessParamsType Params
    ) : ChromeProtocol.Core.IEvent
    {
    }
    [ChromeProtocol.Core.MethodName("Storage.storageBucketCreatedOrUpdated")]
    public record StorageBucketCreatedOrUpdated(
      [property: Newtonsoft.Json.JsonProperty("bucketInfo")]
      ChromeProtocol.Domains.Storage.StorageBucketInfoType BucketInfo
    ) : ChromeProtocol.Core.IEvent
    {
    }
    [ChromeProtocol.Core.MethodName("Storage.storageBucketDeleted")]
    public record StorageBucketDeleted(
      [property: Newtonsoft.Json.JsonProperty("bucketId")]
      string BucketId
    ) : ChromeProtocol.Core.IEvent
    {
    }
    [ChromeProtocol.Core.MethodName("Storage.attributionReportingSourceRegistered")]
    public record AttributionReportingSourceRegistered(
      [property: Newtonsoft.Json.JsonProperty("registration")]
      ChromeProtocol.Domains.Storage.AttributionReportingSourceRegistrationType Registration,
      [property: Newtonsoft.Json.JsonProperty("result")]
      ChromeProtocol.Domains.Storage.AttributionReportingSourceRegistrationResultType Result
    ) : ChromeProtocol.Core.IEvent
    {
    }
    [ChromeProtocol.Core.MethodName("Storage.attributionReportingTriggerRegistered")]
    public record AttributionReportingTriggerRegistered(
      [property: Newtonsoft.Json.JsonProperty("registration")]
      ChromeProtocol.Domains.Storage.AttributionReportingTriggerRegistrationType Registration,
      [property: Newtonsoft.Json.JsonProperty("eventLevel")]
      ChromeProtocol.Domains.Storage.AttributionReportingEventLevelResultType EventLevel,
      [property: Newtonsoft.Json.JsonProperty("aggregatable")]
      ChromeProtocol.Domains.Storage.AttributionReportingAggregatableResultType Aggregatable
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Returns a storage key given a frame id.</summary>
    public static ChromeProtocol.Domains.Storage.GetStorageKeyForFrameRequest GetStorageKeyForFrame(ChromeProtocol.Domains.Page.FrameIdType FrameId)    
    {
      return new ChromeProtocol.Domains.Storage.GetStorageKeyForFrameRequest(FrameId);
    }
    /// <summary>Returns a storage key given a frame id.</summary>
    [ChromeProtocol.Core.MethodName("Storage.getStorageKeyForFrame")]
    public record GetStorageKeyForFrameRequest(
      [property: Newtonsoft.Json.JsonProperty("frameId")]
      ChromeProtocol.Domains.Page.FrameIdType FrameId
    ) : ChromeProtocol.Core.ICommand<GetStorageKeyForFrameRequestResult>
    {
    }
    public record GetStorageKeyForFrameRequestResult(
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      ChromeProtocol.Domains.Storage.SerializedStorageKeyType StorageKey
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears storage for origin.</summary>
    /// <param name="Origin">Security origin.</param>
    /// <param name="StorageTypes">Comma separated list of StorageType to clear.</param>
    public static ChromeProtocol.Domains.Storage.ClearDataForOriginRequest ClearDataForOrigin(string Origin, string StorageTypes)    
    {
      return new ChromeProtocol.Domains.Storage.ClearDataForOriginRequest(Origin, StorageTypes);
    }
    /// <summary>Clears storage for origin.</summary>
    /// <param name="Origin">Security origin.</param>
    /// <param name="StorageTypes">Comma separated list of StorageType to clear.</param>
    [ChromeProtocol.Core.MethodName("Storage.clearDataForOrigin")]
    public record ClearDataForOriginRequest(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin,
      [property: Newtonsoft.Json.JsonProperty("storageTypes")]
      string StorageTypes
    ) : ChromeProtocol.Core.ICommand<ClearDataForOriginRequestResult>
    {
    }
    public record ClearDataForOriginRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears storage for storage key.</summary>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageTypes">Comma separated list of StorageType to clear.</param>
    public static ChromeProtocol.Domains.Storage.ClearDataForStorageKeyRequest ClearDataForStorageKey(string StorageKey, string StorageTypes)    
    {
      return new ChromeProtocol.Domains.Storage.ClearDataForStorageKeyRequest(StorageKey, StorageTypes);
    }
    /// <summary>Clears storage for storage key.</summary>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageTypes">Comma separated list of StorageType to clear.</param>
    [ChromeProtocol.Core.MethodName("Storage.clearDataForStorageKey")]
    public record ClearDataForStorageKeyRequest(
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey,
      [property: Newtonsoft.Json.JsonProperty("storageTypes")]
      string StorageTypes
    ) : ChromeProtocol.Core.ICommand<ClearDataForStorageKeyRequestResult>
    {
    }
    public record ClearDataForStorageKeyRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns all browser cookies.</summary>
    /// <param name="BrowserContextId">Browser context to use when called on the browser endpoint.</param>
    public static ChromeProtocol.Domains.Storage.GetCookiesRequest GetCookies(ChromeProtocol.Domains.Browser.BrowserContextIDType? BrowserContextId = default)    
    {
      return new ChromeProtocol.Domains.Storage.GetCookiesRequest(BrowserContextId);
    }
    /// <summary>Returns all browser cookies.</summary>
    /// <param name="BrowserContextId">Browser context to use when called on the browser endpoint.</param>
    [ChromeProtocol.Core.MethodName("Storage.getCookies")]
    public record GetCookiesRequest(
      [property: Newtonsoft.Json.JsonProperty("browserContextId")]
      ChromeProtocol.Domains.Browser.BrowserContextIDType? BrowserContextId = default
    ) : ChromeProtocol.Core.ICommand<GetCookiesRequestResult>
    {
    }
    /// <param name="Cookies">Array of cookie objects.</param>
    public record GetCookiesRequestResult(
      [property: Newtonsoft.Json.JsonProperty("cookies")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Network.CookieType> Cookies
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sets given cookies.</summary>
    /// <param name="Cookies">Cookies to be set.</param>
    /// <param name="BrowserContextId">Browser context to use when called on the browser endpoint.</param>
    public static ChromeProtocol.Domains.Storage.SetCookiesRequest SetCookies(System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Network.CookieParamType> Cookies, ChromeProtocol.Domains.Browser.BrowserContextIDType? BrowserContextId = default)    
    {
      return new ChromeProtocol.Domains.Storage.SetCookiesRequest(Cookies, BrowserContextId);
    }
    /// <summary>Sets given cookies.</summary>
    /// <param name="Cookies">Cookies to be set.</param>
    /// <param name="BrowserContextId">Browser context to use when called on the browser endpoint.</param>
    [ChromeProtocol.Core.MethodName("Storage.setCookies")]
    public record SetCookiesRequest(
      [property: Newtonsoft.Json.JsonProperty("cookies")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Network.CookieParamType> Cookies,
      [property: Newtonsoft.Json.JsonProperty("browserContextId")]
      ChromeProtocol.Domains.Browser.BrowserContextIDType? BrowserContextId = default
    ) : ChromeProtocol.Core.ICommand<SetCookiesRequestResult>
    {
    }
    public record SetCookiesRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears cookies.</summary>
    /// <param name="BrowserContextId">Browser context to use when called on the browser endpoint.</param>
    public static ChromeProtocol.Domains.Storage.ClearCookiesRequest ClearCookies(ChromeProtocol.Domains.Browser.BrowserContextIDType? BrowserContextId = default)    
    {
      return new ChromeProtocol.Domains.Storage.ClearCookiesRequest(BrowserContextId);
    }
    /// <summary>Clears cookies.</summary>
    /// <param name="BrowserContextId">Browser context to use when called on the browser endpoint.</param>
    [ChromeProtocol.Core.MethodName("Storage.clearCookies")]
    public record ClearCookiesRequest(
      [property: Newtonsoft.Json.JsonProperty("browserContextId")]
      ChromeProtocol.Domains.Browser.BrowserContextIDType? BrowserContextId = default
    ) : ChromeProtocol.Core.ICommand<ClearCookiesRequestResult>
    {
    }
    public record ClearCookiesRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns usage and quota in bytes.</summary>
    /// <param name="Origin">Security origin.</param>
    public static ChromeProtocol.Domains.Storage.GetUsageAndQuotaRequest GetUsageAndQuota(string Origin)    
    {
      return new ChromeProtocol.Domains.Storage.GetUsageAndQuotaRequest(Origin);
    }
    /// <summary>Returns usage and quota in bytes.</summary>
    /// <param name="Origin">Security origin.</param>
    [ChromeProtocol.Core.MethodName("Storage.getUsageAndQuota")]
    public record GetUsageAndQuotaRequest(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin
    ) : ChromeProtocol.Core.ICommand<GetUsageAndQuotaRequestResult>
    {
    }
    /// <param name="Usage">Storage usage (bytes).</param>
    /// <param name="Quota">Storage quota (bytes).</param>
    /// <param name="OverrideActive">Whether or not the origin has an active storage quota override</param>
    /// <param name="UsageBreakdown">Storage usage per type (bytes).</param>
    public record GetUsageAndQuotaRequestResult(
      [property: Newtonsoft.Json.JsonProperty("usage")]
      double Usage,
      [property: Newtonsoft.Json.JsonProperty("quota")]
      double Quota,
      [property: Newtonsoft.Json.JsonProperty("overrideActive")]
      bool OverrideActive,
      [property: Newtonsoft.Json.JsonProperty("usageBreakdown")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.UsageForTypeType> UsageBreakdown
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Override quota for the specified origin</summary>
    /// <param name="Origin">Security origin.</param>
    /// <param name="QuotaSize">
    /// The quota size (in bytes) to override the original quota with.<br/>
    /// If this is called multiple times, the overridden quota will be equal to<br/>
    /// the quotaSize provided in the final call. If this is called without<br/>
    /// specifying a quotaSize, the quota will be reset to the default value for<br/>
    /// the specified origin. If this is called multiple times with different<br/>
    /// origins, the override will be maintained for each origin until it is<br/>
    /// disabled (called without a quotaSize).<br/>
    /// </param>
    public static ChromeProtocol.Domains.Storage.OverrideQuotaForOriginRequest OverrideQuotaForOrigin(string Origin, double? QuotaSize = default)    
    {
      return new ChromeProtocol.Domains.Storage.OverrideQuotaForOriginRequest(Origin, QuotaSize);
    }
    /// <summary>Override quota for the specified origin</summary>
    /// <param name="Origin">Security origin.</param>
    /// <param name="QuotaSize">
    /// The quota size (in bytes) to override the original quota with.<br/>
    /// If this is called multiple times, the overridden quota will be equal to<br/>
    /// the quotaSize provided in the final call. If this is called without<br/>
    /// specifying a quotaSize, the quota will be reset to the default value for<br/>
    /// the specified origin. If this is called multiple times with different<br/>
    /// origins, the override will be maintained for each origin until it is<br/>
    /// disabled (called without a quotaSize).<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Storage.overrideQuotaForOrigin")]
    public record OverrideQuotaForOriginRequest(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin,
      [property: Newtonsoft.Json.JsonProperty("quotaSize")]
      double? QuotaSize = default
    ) : ChromeProtocol.Core.ICommand<OverrideQuotaForOriginRequestResult>
    {
    }
    public record OverrideQuotaForOriginRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Registers origin to be notified when an update occurs to its cache storage list.</summary>
    /// <param name="Origin">Security origin.</param>
    public static ChromeProtocol.Domains.Storage.TrackCacheStorageForOriginRequest TrackCacheStorageForOrigin(string Origin)    
    {
      return new ChromeProtocol.Domains.Storage.TrackCacheStorageForOriginRequest(Origin);
    }
    /// <summary>Registers origin to be notified when an update occurs to its cache storage list.</summary>
    /// <param name="Origin">Security origin.</param>
    [ChromeProtocol.Core.MethodName("Storage.trackCacheStorageForOrigin")]
    public record TrackCacheStorageForOriginRequest(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin
    ) : ChromeProtocol.Core.ICommand<TrackCacheStorageForOriginRequestResult>
    {
    }
    public record TrackCacheStorageForOriginRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Registers storage key to be notified when an update occurs to its cache storage list.</summary>
    /// <param name="StorageKey">Storage key.</param>
    public static ChromeProtocol.Domains.Storage.TrackCacheStorageForStorageKeyRequest TrackCacheStorageForStorageKey(string StorageKey)    
    {
      return new ChromeProtocol.Domains.Storage.TrackCacheStorageForStorageKeyRequest(StorageKey);
    }
    /// <summary>Registers storage key to be notified when an update occurs to its cache storage list.</summary>
    /// <param name="StorageKey">Storage key.</param>
    [ChromeProtocol.Core.MethodName("Storage.trackCacheStorageForStorageKey")]
    public record TrackCacheStorageForStorageKeyRequest(
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey
    ) : ChromeProtocol.Core.ICommand<TrackCacheStorageForStorageKeyRequestResult>
    {
    }
    public record TrackCacheStorageForStorageKeyRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Registers origin to be notified when an update occurs to its IndexedDB.</summary>
    /// <param name="Origin">Security origin.</param>
    public static ChromeProtocol.Domains.Storage.TrackIndexedDBForOriginRequest TrackIndexedDBForOrigin(string Origin)    
    {
      return new ChromeProtocol.Domains.Storage.TrackIndexedDBForOriginRequest(Origin);
    }
    /// <summary>Registers origin to be notified when an update occurs to its IndexedDB.</summary>
    /// <param name="Origin">Security origin.</param>
    [ChromeProtocol.Core.MethodName("Storage.trackIndexedDBForOrigin")]
    public record TrackIndexedDBForOriginRequest(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin
    ) : ChromeProtocol.Core.ICommand<TrackIndexedDBForOriginRequestResult>
    {
    }
    public record TrackIndexedDBForOriginRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Registers storage key to be notified when an update occurs to its IndexedDB.</summary>
    /// <param name="StorageKey">Storage key.</param>
    public static ChromeProtocol.Domains.Storage.TrackIndexedDBForStorageKeyRequest TrackIndexedDBForStorageKey(string StorageKey)    
    {
      return new ChromeProtocol.Domains.Storage.TrackIndexedDBForStorageKeyRequest(StorageKey);
    }
    /// <summary>Registers storage key to be notified when an update occurs to its IndexedDB.</summary>
    /// <param name="StorageKey">Storage key.</param>
    [ChromeProtocol.Core.MethodName("Storage.trackIndexedDBForStorageKey")]
    public record TrackIndexedDBForStorageKeyRequest(
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey
    ) : ChromeProtocol.Core.ICommand<TrackIndexedDBForStorageKeyRequestResult>
    {
    }
    public record TrackIndexedDBForStorageKeyRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Unregisters origin from receiving notifications for cache storage.</summary>
    /// <param name="Origin">Security origin.</param>
    public static ChromeProtocol.Domains.Storage.UntrackCacheStorageForOriginRequest UntrackCacheStorageForOrigin(string Origin)    
    {
      return new ChromeProtocol.Domains.Storage.UntrackCacheStorageForOriginRequest(Origin);
    }
    /// <summary>Unregisters origin from receiving notifications for cache storage.</summary>
    /// <param name="Origin">Security origin.</param>
    [ChromeProtocol.Core.MethodName("Storage.untrackCacheStorageForOrigin")]
    public record UntrackCacheStorageForOriginRequest(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin
    ) : ChromeProtocol.Core.ICommand<UntrackCacheStorageForOriginRequestResult>
    {
    }
    public record UntrackCacheStorageForOriginRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Unregisters storage key from receiving notifications for cache storage.</summary>
    /// <param name="StorageKey">Storage key.</param>
    public static ChromeProtocol.Domains.Storage.UntrackCacheStorageForStorageKeyRequest UntrackCacheStorageForStorageKey(string StorageKey)    
    {
      return new ChromeProtocol.Domains.Storage.UntrackCacheStorageForStorageKeyRequest(StorageKey);
    }
    /// <summary>Unregisters storage key from receiving notifications for cache storage.</summary>
    /// <param name="StorageKey">Storage key.</param>
    [ChromeProtocol.Core.MethodName("Storage.untrackCacheStorageForStorageKey")]
    public record UntrackCacheStorageForStorageKeyRequest(
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey
    ) : ChromeProtocol.Core.ICommand<UntrackCacheStorageForStorageKeyRequestResult>
    {
    }
    public record UntrackCacheStorageForStorageKeyRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Unregisters origin from receiving notifications for IndexedDB.</summary>
    /// <param name="Origin">Security origin.</param>
    public static ChromeProtocol.Domains.Storage.UntrackIndexedDBForOriginRequest UntrackIndexedDBForOrigin(string Origin)    
    {
      return new ChromeProtocol.Domains.Storage.UntrackIndexedDBForOriginRequest(Origin);
    }
    /// <summary>Unregisters origin from receiving notifications for IndexedDB.</summary>
    /// <param name="Origin">Security origin.</param>
    [ChromeProtocol.Core.MethodName("Storage.untrackIndexedDBForOrigin")]
    public record UntrackIndexedDBForOriginRequest(
      [property: Newtonsoft.Json.JsonProperty("origin")]
      string Origin
    ) : ChromeProtocol.Core.ICommand<UntrackIndexedDBForOriginRequestResult>
    {
    }
    public record UntrackIndexedDBForOriginRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Unregisters storage key from receiving notifications for IndexedDB.</summary>
    /// <param name="StorageKey">Storage key.</param>
    public static ChromeProtocol.Domains.Storage.UntrackIndexedDBForStorageKeyRequest UntrackIndexedDBForStorageKey(string StorageKey)    
    {
      return new ChromeProtocol.Domains.Storage.UntrackIndexedDBForStorageKeyRequest(StorageKey);
    }
    /// <summary>Unregisters storage key from receiving notifications for IndexedDB.</summary>
    /// <param name="StorageKey">Storage key.</param>
    [ChromeProtocol.Core.MethodName("Storage.untrackIndexedDBForStorageKey")]
    public record UntrackIndexedDBForStorageKeyRequest(
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey
    ) : ChromeProtocol.Core.ICommand<UntrackIndexedDBForStorageKeyRequestResult>
    {
    }
    public record UntrackIndexedDBForStorageKeyRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Returns the number of stored Trust Tokens per issuer for the<br/>
    /// current browsing context.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Storage.GetTrustTokensRequest GetTrustTokens()    
    {
      return new ChromeProtocol.Domains.Storage.GetTrustTokensRequest();
    }
    /// <summary>
    /// Returns the number of stored Trust Tokens per issuer for the<br/>
    /// current browsing context.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Storage.getTrustTokens")]
    public record GetTrustTokensRequest() : ChromeProtocol.Core.ICommand<GetTrustTokensRequestResult>
    {
    }
    public record GetTrustTokensRequestResult(
      [property: Newtonsoft.Json.JsonProperty("tokens")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.TrustTokensType> Tokens
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Removes all Trust Tokens issued by the provided issuerOrigin.<br/>
    /// Leaves other stored data, including the issuer&#39;s Redemption Records, intact.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Storage.ClearTrustTokensRequest ClearTrustTokens(string IssuerOrigin)    
    {
      return new ChromeProtocol.Domains.Storage.ClearTrustTokensRequest(IssuerOrigin);
    }
    /// <summary>
    /// Removes all Trust Tokens issued by the provided issuerOrigin.<br/>
    /// Leaves other stored data, including the issuer&#39;s Redemption Records, intact.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Storage.clearTrustTokens")]
    public record ClearTrustTokensRequest(
      [property: Newtonsoft.Json.JsonProperty("issuerOrigin")]
      string IssuerOrigin
    ) : ChromeProtocol.Core.ICommand<ClearTrustTokensRequestResult>
    {
    }
    /// <param name="DidDeleteTokens">True if any tokens were deleted, false otherwise.</param>
    public record ClearTrustTokensRequestResult(
      [property: Newtonsoft.Json.JsonProperty("didDeleteTokens")]
      bool DidDeleteTokens
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Gets details for a named interest group.</summary>
    public static ChromeProtocol.Domains.Storage.GetInterestGroupDetailsRequest GetInterestGroupDetails(string OwnerOrigin, string Name)    
    {
      return new ChromeProtocol.Domains.Storage.GetInterestGroupDetailsRequest(OwnerOrigin, Name);
    }
    /// <summary>Gets details for a named interest group.</summary>
    [ChromeProtocol.Core.MethodName("Storage.getInterestGroupDetails")]
    public record GetInterestGroupDetailsRequest(
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin,
      [property: Newtonsoft.Json.JsonProperty("name")]
      string Name
    ) : ChromeProtocol.Core.ICommand<GetInterestGroupDetailsRequestResult>
    {
    }
    public record GetInterestGroupDetailsRequestResult(
      [property: Newtonsoft.Json.JsonProperty("details")]
      ChromeProtocol.Domains.Storage.InterestGroupDetailsType Details
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables/Disables issuing of interestGroupAccessed events.</summary>
    public static ChromeProtocol.Domains.Storage.SetInterestGroupTrackingRequest SetInterestGroupTracking(bool Enable)    
    {
      return new ChromeProtocol.Domains.Storage.SetInterestGroupTrackingRequest(Enable);
    }
    /// <summary>Enables/Disables issuing of interestGroupAccessed events.</summary>
    [ChromeProtocol.Core.MethodName("Storage.setInterestGroupTracking")]
    public record SetInterestGroupTrackingRequest(
      [property: Newtonsoft.Json.JsonProperty("enable")]
      bool Enable
    ) : ChromeProtocol.Core.ICommand<SetInterestGroupTrackingRequestResult>
    {
    }
    public record SetInterestGroupTrackingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Enables/Disables issuing of interestGroupAuctionEventOccurred and<br/>
    /// interestGroupAuctionNetworkRequestCreated.<br/>
    /// </summary>
    public static ChromeProtocol.Domains.Storage.SetInterestGroupAuctionTrackingRequest SetInterestGroupAuctionTracking(bool Enable)    
    {
      return new ChromeProtocol.Domains.Storage.SetInterestGroupAuctionTrackingRequest(Enable);
    }
    /// <summary>
    /// Enables/Disables issuing of interestGroupAuctionEventOccurred and<br/>
    /// interestGroupAuctionNetworkRequestCreated.<br/>
    /// </summary>
    [ChromeProtocol.Core.MethodName("Storage.setInterestGroupAuctionTracking")]
    public record SetInterestGroupAuctionTrackingRequest(
      [property: Newtonsoft.Json.JsonProperty("enable")]
      bool Enable
    ) : ChromeProtocol.Core.ICommand<SetInterestGroupAuctionTrackingRequestResult>
    {
    }
    public record SetInterestGroupAuctionTrackingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Gets metadata for an origin&#39;s shared storage.</summary>
    public static ChromeProtocol.Domains.Storage.GetSharedStorageMetadataRequest GetSharedStorageMetadata(string OwnerOrigin)    
    {
      return new ChromeProtocol.Domains.Storage.GetSharedStorageMetadataRequest(OwnerOrigin);
    }
    /// <summary>Gets metadata for an origin&#39;s shared storage.</summary>
    [ChromeProtocol.Core.MethodName("Storage.getSharedStorageMetadata")]
    public record GetSharedStorageMetadataRequest(
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin
    ) : ChromeProtocol.Core.ICommand<GetSharedStorageMetadataRequestResult>
    {
    }
    public record GetSharedStorageMetadataRequestResult(
      [property: Newtonsoft.Json.JsonProperty("metadata")]
      ChromeProtocol.Domains.Storage.SharedStorageMetadataType Metadata
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Gets the entries in an given origin&#39;s shared storage.</summary>
    public static ChromeProtocol.Domains.Storage.GetSharedStorageEntriesRequest GetSharedStorageEntries(string OwnerOrigin)    
    {
      return new ChromeProtocol.Domains.Storage.GetSharedStorageEntriesRequest(OwnerOrigin);
    }
    /// <summary>Gets the entries in an given origin&#39;s shared storage.</summary>
    [ChromeProtocol.Core.MethodName("Storage.getSharedStorageEntries")]
    public record GetSharedStorageEntriesRequest(
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin
    ) : ChromeProtocol.Core.ICommand<GetSharedStorageEntriesRequestResult>
    {
    }
    public record GetSharedStorageEntriesRequestResult(
      [property: Newtonsoft.Json.JsonProperty("entries")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Storage.SharedStorageEntryType> Entries
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sets entry with `key` and `value` for a given origin&#39;s shared storage.</summary>
    /// <param name="IgnoreIfPresent">
    /// If `ignoreIfPresent` is included and true, then only sets the entry if<br/>
    /// `key` doesn&#39;t already exist.<br/>
    /// </param>
    public static ChromeProtocol.Domains.Storage.SetSharedStorageEntryRequest SetSharedStorageEntry(string OwnerOrigin, string Key, string Value, bool? IgnoreIfPresent = default)    
    {
      return new ChromeProtocol.Domains.Storage.SetSharedStorageEntryRequest(OwnerOrigin, Key, Value, IgnoreIfPresent);
    }
    /// <summary>Sets entry with `key` and `value` for a given origin&#39;s shared storage.</summary>
    /// <param name="IgnoreIfPresent">
    /// If `ignoreIfPresent` is included and true, then only sets the entry if<br/>
    /// `key` doesn&#39;t already exist.<br/>
    /// </param>
    [ChromeProtocol.Core.MethodName("Storage.setSharedStorageEntry")]
    public record SetSharedStorageEntryRequest(
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin,
      [property: Newtonsoft.Json.JsonProperty("key")]
      string Key,
      [property: Newtonsoft.Json.JsonProperty("value")]
      string Value,
      [property: Newtonsoft.Json.JsonProperty("ignoreIfPresent")]
      bool? IgnoreIfPresent = default
    ) : ChromeProtocol.Core.ICommand<SetSharedStorageEntryRequestResult>
    {
    }
    public record SetSharedStorageEntryRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Deletes entry for `key` (if it exists) for a given origin&#39;s shared storage.</summary>
    public static ChromeProtocol.Domains.Storage.DeleteSharedStorageEntryRequest DeleteSharedStorageEntry(string OwnerOrigin, string Key)    
    {
      return new ChromeProtocol.Domains.Storage.DeleteSharedStorageEntryRequest(OwnerOrigin, Key);
    }
    /// <summary>Deletes entry for `key` (if it exists) for a given origin&#39;s shared storage.</summary>
    [ChromeProtocol.Core.MethodName("Storage.deleteSharedStorageEntry")]
    public record DeleteSharedStorageEntryRequest(
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin,
      [property: Newtonsoft.Json.JsonProperty("key")]
      string Key
    ) : ChromeProtocol.Core.ICommand<DeleteSharedStorageEntryRequestResult>
    {
    }
    public record DeleteSharedStorageEntryRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears all entries for a given origin&#39;s shared storage.</summary>
    public static ChromeProtocol.Domains.Storage.ClearSharedStorageEntriesRequest ClearSharedStorageEntries(string OwnerOrigin)    
    {
      return new ChromeProtocol.Domains.Storage.ClearSharedStorageEntriesRequest(OwnerOrigin);
    }
    /// <summary>Clears all entries for a given origin&#39;s shared storage.</summary>
    [ChromeProtocol.Core.MethodName("Storage.clearSharedStorageEntries")]
    public record ClearSharedStorageEntriesRequest(
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin
    ) : ChromeProtocol.Core.ICommand<ClearSharedStorageEntriesRequestResult>
    {
    }
    public record ClearSharedStorageEntriesRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Resets the budget for `ownerOrigin` by clearing all budget withdrawals.</summary>
    public static ChromeProtocol.Domains.Storage.ResetSharedStorageBudgetRequest ResetSharedStorageBudget(string OwnerOrigin)    
    {
      return new ChromeProtocol.Domains.Storage.ResetSharedStorageBudgetRequest(OwnerOrigin);
    }
    /// <summary>Resets the budget for `ownerOrigin` by clearing all budget withdrawals.</summary>
    [ChromeProtocol.Core.MethodName("Storage.resetSharedStorageBudget")]
    public record ResetSharedStorageBudgetRequest(
      [property: Newtonsoft.Json.JsonProperty("ownerOrigin")]
      string OwnerOrigin
    ) : ChromeProtocol.Core.ICommand<ResetSharedStorageBudgetRequestResult>
    {
    }
    public record ResetSharedStorageBudgetRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables/disables issuing of sharedStorageAccessed events.</summary>
    public static ChromeProtocol.Domains.Storage.SetSharedStorageTrackingRequest SetSharedStorageTracking(bool Enable)    
    {
      return new ChromeProtocol.Domains.Storage.SetSharedStorageTrackingRequest(Enable);
    }
    /// <summary>Enables/disables issuing of sharedStorageAccessed events.</summary>
    [ChromeProtocol.Core.MethodName("Storage.setSharedStorageTracking")]
    public record SetSharedStorageTrackingRequest(
      [property: Newtonsoft.Json.JsonProperty("enable")]
      bool Enable
    ) : ChromeProtocol.Core.ICommand<SetSharedStorageTrackingRequestResult>
    {
    }
    public record SetSharedStorageTrackingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Set tracking for a storage key&#39;s buckets.</summary>
    public static ChromeProtocol.Domains.Storage.SetStorageBucketTrackingRequest SetStorageBucketTracking(string StorageKey, bool Enable)    
    {
      return new ChromeProtocol.Domains.Storage.SetStorageBucketTrackingRequest(StorageKey, Enable);
    }
    /// <summary>Set tracking for a storage key&#39;s buckets.</summary>
    [ChromeProtocol.Core.MethodName("Storage.setStorageBucketTracking")]
    public record SetStorageBucketTrackingRequest(
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string StorageKey,
      [property: Newtonsoft.Json.JsonProperty("enable")]
      bool Enable
    ) : ChromeProtocol.Core.ICommand<SetStorageBucketTrackingRequestResult>
    {
    }
    public record SetStorageBucketTrackingRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Deletes the Storage Bucket with the given storage key and bucket name.</summary>
    public static ChromeProtocol.Domains.Storage.DeleteStorageBucketRequest DeleteStorageBucket(ChromeProtocol.Domains.Storage.StorageBucketType Bucket)    
    {
      return new ChromeProtocol.Domains.Storage.DeleteStorageBucketRequest(Bucket);
    }
    /// <summary>Deletes the Storage Bucket with the given storage key and bucket name.</summary>
    [ChromeProtocol.Core.MethodName("Storage.deleteStorageBucket")]
    public record DeleteStorageBucketRequest(
      [property: Newtonsoft.Json.JsonProperty("bucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType Bucket
    ) : ChromeProtocol.Core.ICommand<DeleteStorageBucketRequestResult>
    {
    }
    public record DeleteStorageBucketRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Deletes state for sites identified as potential bounce trackers, immediately.</summary>
    public static ChromeProtocol.Domains.Storage.RunBounceTrackingMitigationsRequest RunBounceTrackingMitigations()    
    {
      return new ChromeProtocol.Domains.Storage.RunBounceTrackingMitigationsRequest();
    }
    /// <summary>Deletes state for sites identified as potential bounce trackers, immediately.</summary>
    [ChromeProtocol.Core.MethodName("Storage.runBounceTrackingMitigations")]
    public record RunBounceTrackingMitigationsRequest() : ChromeProtocol.Core.ICommand<RunBounceTrackingMitigationsRequestResult>
    {
    }
    public record RunBounceTrackingMitigationsRequestResult(
      [property: Newtonsoft.Json.JsonProperty("deletedSites")]
      System.Collections.Generic.IReadOnlyList<string> DeletedSites
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>https://wicg.github.io/attribution-reporting-api/</summary>
    /// <param name="Enabled">If enabled, noise is suppressed and reports are sent immediately.</param>
    public static ChromeProtocol.Domains.Storage.SetAttributionReportingLocalTestingModeRequest SetAttributionReportingLocalTestingMode(bool Enabled)    
    {
      return new ChromeProtocol.Domains.Storage.SetAttributionReportingLocalTestingModeRequest(Enabled);
    }
    /// <summary>https://wicg.github.io/attribution-reporting-api/</summary>
    /// <param name="Enabled">If enabled, noise is suppressed and reports are sent immediately.</param>
    [ChromeProtocol.Core.MethodName("Storage.setAttributionReportingLocalTestingMode")]
    public record SetAttributionReportingLocalTestingModeRequest(
      [property: Newtonsoft.Json.JsonProperty("enabled")]
      bool Enabled
    ) : ChromeProtocol.Core.ICommand<SetAttributionReportingLocalTestingModeRequestResult>
    {
    }
    public record SetAttributionReportingLocalTestingModeRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables/disables issuing of Attribution Reporting events.</summary>
    public static ChromeProtocol.Domains.Storage.SetAttributionReportingTrackingRequest SetAttributionReportingTracking(bool Enable)    
    {
      return new ChromeProtocol.Domains.Storage.SetAttributionReportingTrackingRequest(Enable);
    }
    /// <summary>Enables/disables issuing of Attribution Reporting events.</summary>
    [ChromeProtocol.Core.MethodName("Storage.setAttributionReportingTracking")]
    public record SetAttributionReportingTrackingRequest(
      [property: Newtonsoft.Json.JsonProperty("enable")]
      bool Enable
    ) : ChromeProtocol.Core.ICommand<SetAttributionReportingTrackingRequestResult>
    {
    }
    public record SetAttributionReportingTrackingRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
