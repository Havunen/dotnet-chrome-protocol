// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class Database
  {
    /// <summary>Unique identifier of Database object.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(ChromeProtocol.Core.PrimitiveTypeConverter))]
    public record DatabaseIdType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Database object.</summary>
    /// <param name="Id">Database ID.</param>
    /// <param name="Domain">Database domain.</param>
    /// <param name="Name">Database name.</param>
    /// <param name="Version">Database version.</param>
    public record DatabaseType(
      [property: Newtonsoft.Json.JsonProperty("id")]
      ChromeProtocol.Domains.Database.DatabaseIdType Id,
      [property: Newtonsoft.Json.JsonProperty("domain")]
      string Domain,
      [property: Newtonsoft.Json.JsonProperty("name")]
      string Name,
      [property: Newtonsoft.Json.JsonProperty("version")]
      string Version
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Database error.</summary>
    /// <param name="Message">Error message.</param>
    /// <param name="Code">Error code.</param>
    public record ErrorType(
      [property: Newtonsoft.Json.JsonProperty("message")]
      string Message,
      [property: Newtonsoft.Json.JsonProperty("code")]
      int Code
    ) : ChromeProtocol.Core.IType
    {
    }
    [ChromeProtocol.Core.MethodName("Database.addDatabase")]
    public record AddDatabase(
      [property: Newtonsoft.Json.JsonProperty("database")]
      ChromeProtocol.Domains.Database.DatabaseType Database
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Disables database tracking, prevents database events from being sent to the client.</summary>
    public static ChromeProtocol.Domains.Database.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Database.DisableRequest();
    }
    /// <summary>Disables database tracking, prevents database events from being sent to the client.</summary>
    [ChromeProtocol.Core.MethodName("Database.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables database tracking, database events will now be delivered to the client.</summary>
    public static ChromeProtocol.Domains.Database.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.Database.EnableRequest();
    }
    /// <summary>Enables database tracking, database events will now be delivered to the client.</summary>
    [ChromeProtocol.Core.MethodName("Database.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.Database.ExecuteSQLRequest ExecuteSQL(ChromeProtocol.Domains.Database.DatabaseIdType DatabaseId, string Query)    
    {
      return new ChromeProtocol.Domains.Database.ExecuteSQLRequest(DatabaseId, Query);
    }
    [ChromeProtocol.Core.MethodName("Database.executeSQL")]
    public record ExecuteSQLRequest(
      [property: Newtonsoft.Json.JsonProperty("databaseId")]
      ChromeProtocol.Domains.Database.DatabaseIdType DatabaseId,
      [property: Newtonsoft.Json.JsonProperty("query")]
      string Query
    ) : ChromeProtocol.Core.ICommand<ExecuteSQLRequestResult>
    {
    }
    public record ExecuteSQLRequestResult(
      [property: Newtonsoft.Json.JsonProperty("columnNames")]
      System.Collections.Generic.IReadOnlyList<string>? ColumnNames = default,
      [property: Newtonsoft.Json.JsonProperty("values")]
      System.Collections.Generic.IReadOnlyList<Newtonsoft.Json.Linq.JToken>? Values = default,
      [property: Newtonsoft.Json.JsonProperty("sqlError")]
      ChromeProtocol.Domains.Database.ErrorType? SqlError = default
    ) : ChromeProtocol.Core.IType
    {
    }
    public static ChromeProtocol.Domains.Database.GetDatabaseTableNamesRequest GetDatabaseTableNames(ChromeProtocol.Domains.Database.DatabaseIdType DatabaseId)    
    {
      return new ChromeProtocol.Domains.Database.GetDatabaseTableNamesRequest(DatabaseId);
    }
    [ChromeProtocol.Core.MethodName("Database.getDatabaseTableNames")]
    public record GetDatabaseTableNamesRequest(
      [property: Newtonsoft.Json.JsonProperty("databaseId")]
      ChromeProtocol.Domains.Database.DatabaseIdType DatabaseId
    ) : ChromeProtocol.Core.ICommand<GetDatabaseTableNamesRequestResult>
    {
    }
    public record GetDatabaseTableNamesRequestResult(
      [property: Newtonsoft.Json.JsonProperty("tableNames")]
      System.Collections.Generic.IReadOnlyList<string> TableNames
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
