// <auto-generated />
#nullable enable

using ChromeProtocol.Core;

namespace ChromeProtocol.Domains
{
  /// <summary>The SystemInfo domain defines methods and events for querying low-level system information.</summary>
  public static partial class SystemInfo
  {
    /// <summary>Describes a single graphics processor (GPU).</summary>
    /// <param name="VendorId">PCI ID of the GPU vendor, if available; 0 otherwise.</param>
    /// <param name="DeviceId">PCI ID of the GPU device, if available; 0 otherwise.</param>
    /// <param name="VendorString">String description of the GPU vendor, if the PCI ID is not available.</param>
    /// <param name="DeviceString">String description of the GPU device, if the PCI ID is not available.</param>
    /// <param name="DriverVendor">String description of the GPU driver vendor.</param>
    /// <param name="DriverVersion">String description of the GPU driver version.</param>
    /// <param name="SubSysId">Sub sys ID of the GPU, only available on Windows.</param>
    /// <param name="Revision">Revision of the GPU, only available on Windows.</param>
    public record GPUDeviceType(
      [property: Newtonsoft.Json.JsonProperty("vendorId")]
      double VendorId,
      [property: Newtonsoft.Json.JsonProperty("deviceId")]
      double DeviceId,
      [property: Newtonsoft.Json.JsonProperty("vendorString")]
      string VendorString,
      [property: Newtonsoft.Json.JsonProperty("deviceString")]
      string DeviceString,
      [property: Newtonsoft.Json.JsonProperty("driverVendor")]
      string DriverVendor,
      [property: Newtonsoft.Json.JsonProperty("driverVersion")]
      string DriverVersion,
      [property: Newtonsoft.Json.JsonProperty("subSysId")]
      double? SubSysId = default,
      [property: Newtonsoft.Json.JsonProperty("revision")]
      double? Revision = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Describes the width and height dimensions of an entity.</summary>
    /// <param name="Width">Width in pixels.</param>
    /// <param name="Height">Height in pixels.</param>
    public record SizeType(
      [property: Newtonsoft.Json.JsonProperty("width")]
      int Width,
      [property: Newtonsoft.Json.JsonProperty("height")]
      int Height
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Describes a supported video decoding profile with its associated minimum and<br/>
    /// maximum resolutions.<br/>
    /// </summary>
    /// <param name="Profile">Video codec profile that is supported, e.g. VP9 Profile 2.</param>
    /// <param name="MaxResolution">Maximum video dimensions in pixels supported for this |profile|.</param>
    /// <param name="MinResolution">Minimum video dimensions in pixels supported for this |profile|.</param>
    public record VideoDecodeAcceleratorCapabilityType(
      [property: Newtonsoft.Json.JsonProperty("profile")]
      string Profile,
      [property: Newtonsoft.Json.JsonProperty("maxResolution")]
      ChromeProtocol.Domains.SystemInfo.SizeType MaxResolution,
      [property: Newtonsoft.Json.JsonProperty("minResolution")]
      ChromeProtocol.Domains.SystemInfo.SizeType MinResolution
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>
    /// Describes a supported video encoding profile with its associated maximum<br/>
    /// resolution and maximum framerate.<br/>
    /// </summary>
    /// <param name="Profile">Video codec profile that is supported, e.g H264 Main.</param>
    /// <param name="MaxResolution">Maximum video dimensions in pixels supported for this |profile|.</param>
    /// <param name="MaxFramerateNumerator">
    /// Maximum encoding framerate in frames per second supported for this<br/>
    /// |profile|, as fraction&#39;s numerator and denominator, e.g. 24/1 fps,<br/>
    /// 24000/1001 fps, etc.<br/>
    /// </param>
    public record VideoEncodeAcceleratorCapabilityType(
      [property: Newtonsoft.Json.JsonProperty("profile")]
      string Profile,
      [property: Newtonsoft.Json.JsonProperty("maxResolution")]
      ChromeProtocol.Domains.SystemInfo.SizeType MaxResolution,
      [property: Newtonsoft.Json.JsonProperty("maxFramerateNumerator")]
      int MaxFramerateNumerator,
      [property: Newtonsoft.Json.JsonProperty("maxFramerateDenominator")]
      int MaxFramerateDenominator
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>YUV subsampling type of the pixels of a given image.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(PrimitiveTypeConverter))]
    public record SubsamplingFormatType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>Image format of a given image.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(PrimitiveTypeConverter))]
    public record ImageTypeType(
      string Value
    ) : ChromeProtocol.Core.PrimitiveType<string>(Value)
    {
    }
    /// <summary>
    /// Describes a supported image decoding profile with its associated minimum and<br/>
    /// maximum resolutions and subsampling.<br/>
    /// </summary>
    /// <param name="ImageType">Image coded, e.g. Jpeg.</param>
    /// <param name="MaxDimensions">Maximum supported dimensions of the image in pixels.</param>
    /// <param name="MinDimensions">Minimum supported dimensions of the image in pixels.</param>
    /// <param name="Subsamplings">Optional array of supported subsampling formats, e.g. 4:2:0, if known.</param>
    public record ImageDecodeAcceleratorCapabilityType(
      [property: Newtonsoft.Json.JsonProperty("imageType")]
      ChromeProtocol.Domains.SystemInfo.ImageTypeType ImageType,
      [property: Newtonsoft.Json.JsonProperty("maxDimensions")]
      ChromeProtocol.Domains.SystemInfo.SizeType MaxDimensions,
      [property: Newtonsoft.Json.JsonProperty("minDimensions")]
      ChromeProtocol.Domains.SystemInfo.SizeType MinDimensions,
      [property: Newtonsoft.Json.JsonProperty("subsamplings")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.SystemInfo.SubsamplingFormatType> Subsamplings
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Provides information about the GPU(s) on the system.</summary>
    /// <param name="Devices">The graphics devices on the system. Element 0 is the primary GPU.</param>
    /// <param name="DriverBugWorkarounds">An optional array of GPU driver bug workarounds.</param>
    /// <param name="VideoDecoding">Supported accelerated video decoding capabilities.</param>
    /// <param name="VideoEncoding">Supported accelerated video encoding capabilities.</param>
    /// <param name="ImageDecoding">Supported accelerated image decoding capabilities.</param>
    /// <param name="AuxAttributes">An optional dictionary of additional GPU related attributes.</param>
    /// <param name="FeatureStatus">An optional dictionary of graphics features and their status.</param>
    public record GPUInfoType(
      [property: Newtonsoft.Json.JsonProperty("devices")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.SystemInfo.GPUDeviceType> Devices,
      [property: Newtonsoft.Json.JsonProperty("driverBugWorkarounds")]
      System.Collections.Generic.IReadOnlyList<string> DriverBugWorkarounds,
      [property: Newtonsoft.Json.JsonProperty("videoDecoding")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.SystemInfo.VideoDecodeAcceleratorCapabilityType> VideoDecoding,
      [property: Newtonsoft.Json.JsonProperty("videoEncoding")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.SystemInfo.VideoEncodeAcceleratorCapabilityType> VideoEncoding,
      [property: Newtonsoft.Json.JsonProperty("imageDecoding")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.SystemInfo.ImageDecodeAcceleratorCapabilityType> ImageDecoding,
      [property: Newtonsoft.Json.JsonProperty("auxAttributes")]
      Newtonsoft.Json.Linq.JObject? AuxAttributes = default,
      [property: Newtonsoft.Json.JsonProperty("featureStatus")]
      Newtonsoft.Json.Linq.JObject? FeatureStatus = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Represents process info.</summary>
    /// <param name="Type">Specifies process type.</param>
    /// <param name="Id">Specifies process id.</param>
    /// <param name="CpuTime">
    /// Specifies cumulative CPU usage in seconds across all threads of the<br/>
    /// process since the process start.<br/>
    /// </param>
    public record ProcessInfoType(
      [property: Newtonsoft.Json.JsonProperty("type")]
      string Type,
      [property: Newtonsoft.Json.JsonProperty("id")]
      int Id,
      [property: Newtonsoft.Json.JsonProperty("cpuTime")]
      double CpuTime
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns information about the system.</summary>
    public static ChromeProtocol.Domains.SystemInfo.GetInfoRequest GetInfo()    
    {
      return new ChromeProtocol.Domains.SystemInfo.GetInfoRequest();
    }
    /// <summary>Returns information about the system.</summary>
    [ChromeProtocol.Core.MethodName("SystemInfo.getInfo")]
    public record GetInfoRequest() : ChromeProtocol.Core.ICommand<GetInfoRequestResult>
    {
    }
    /// <param name="Gpu">Information about the GPUs on the system.</param>
    /// <param name="ModelName">
    /// A platform-dependent description of the model of the machine. On Mac OS, this is, for<br/>
    /// example, &#39;MacBookPro&#39;. Will be the empty string if not supported.<br/>
    /// </param>
    /// <param name="ModelVersion">
    /// A platform-dependent description of the version of the machine. On Mac OS, this is, for<br/>
    /// example, &#39;10.1&#39;. Will be the empty string if not supported.<br/>
    /// </param>
    /// <param name="CommandLine">
    /// The command line string used to launch the browser. Will be the empty string if not<br/>
    /// supported.<br/>
    /// </param>
    public record GetInfoRequestResult(
      [property: Newtonsoft.Json.JsonProperty("gpu")]
      ChromeProtocol.Domains.SystemInfo.GPUInfoType Gpu,
      [property: Newtonsoft.Json.JsonProperty("modelName")]
      string ModelName,
      [property: Newtonsoft.Json.JsonProperty("modelVersion")]
      string ModelVersion,
      [property: Newtonsoft.Json.JsonProperty("commandLine")]
      string CommandLine
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns information about the feature state.</summary>
    public static ChromeProtocol.Domains.SystemInfo.GetFeatureStateRequest GetFeatureState(string FeatureState)    
    {
      return new ChromeProtocol.Domains.SystemInfo.GetFeatureStateRequest(FeatureState);
    }
    /// <summary>Returns information about the feature state.</summary>
    [ChromeProtocol.Core.MethodName("SystemInfo.getFeatureState")]
    public record GetFeatureStateRequest(
      [property: Newtonsoft.Json.JsonProperty("featureState")]
      string FeatureState
    ) : ChromeProtocol.Core.ICommand<GetFeatureStateRequestResult>
    {
    }
    public record GetFeatureStateRequestResult(
      [property: Newtonsoft.Json.JsonProperty("featureEnabled")]
      bool FeatureEnabled
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns information about all running processes.</summary>
    public static ChromeProtocol.Domains.SystemInfo.GetProcessInfoRequest GetProcessInfo()    
    {
      return new ChromeProtocol.Domains.SystemInfo.GetProcessInfoRequest();
    }
    /// <summary>Returns information about all running processes.</summary>
    [ChromeProtocol.Core.MethodName("SystemInfo.getProcessInfo")]
    public record GetProcessInfoRequest() : ChromeProtocol.Core.ICommand<GetProcessInfoRequestResult>
    {
    }
    /// <param name="ProcessInfo">An array of process info blocks.</param>
    public record GetProcessInfoRequestResult(
      [property: Newtonsoft.Json.JsonProperty("processInfo")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.SystemInfo.ProcessInfoType> ProcessInfo
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
