// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class Animation
  {
    /// <summary>Animation instance.</summary>
    /// <param name="Id">`Animation`&#39;s id.</param>
    /// <param name="Name">`Animation`&#39;s name.</param>
    /// <param name="PausedState">`Animation`&#39;s internal paused state.</param>
    /// <param name="PlayState">`Animation`&#39;s play state.</param>
    /// <param name="PlaybackRate">`Animation`&#39;s playback rate.</param>
    /// <param name="StartTime">`Animation`&#39;s start time.</param>
    /// <param name="CurrentTime">`Animation`&#39;s current time.</param>
    /// <param name="Type">Animation type of `Animation`.</param>
    /// <param name="Source">`Animation`&#39;s source animation node.</param>
    /// <param name="CssId">
    /// A unique ID for `Animation` representing the sources that triggered this CSS<br/>
    /// animation/transition.<br/>
    /// </param>
    public record AnimationType(
      [property: Newtonsoft.Json.JsonProperty("id")]
      string Id,
      [property: Newtonsoft.Json.JsonProperty("name")]
      string Name,
      [property: Newtonsoft.Json.JsonProperty("pausedState")]
      bool PausedState,
      [property: Newtonsoft.Json.JsonProperty("playState")]
      string PlayState,
      [property: Newtonsoft.Json.JsonProperty("playbackRate")]
      double PlaybackRate,
      [property: Newtonsoft.Json.JsonProperty("startTime")]
      double StartTime,
      [property: Newtonsoft.Json.JsonProperty("currentTime")]
      double CurrentTime,
      [property: Newtonsoft.Json.JsonProperty("type")]
      string Type,
      [property: Newtonsoft.Json.JsonProperty("source")]
      ChromeProtocol.Domains.Animation.AnimationEffectType? Source = default,
      [property: Newtonsoft.Json.JsonProperty("cssId")]
      string? CssId = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>AnimationEffect instance</summary>
    /// <param name="Delay">`AnimationEffect`&#39;s delay.</param>
    /// <param name="EndDelay">`AnimationEffect`&#39;s end delay.</param>
    /// <param name="IterationStart">`AnimationEffect`&#39;s iteration start.</param>
    /// <param name="Iterations">`AnimationEffect`&#39;s iterations.</param>
    /// <param name="Duration">`AnimationEffect`&#39;s iteration duration.</param>
    /// <param name="Direction">`AnimationEffect`&#39;s playback direction.</param>
    /// <param name="Fill">`AnimationEffect`&#39;s fill mode.</param>
    /// <param name="Easing">`AnimationEffect`&#39;s timing function.</param>
    /// <param name="BackendNodeId">`AnimationEffect`&#39;s target node.</param>
    /// <param name="KeyframesRule">`AnimationEffect`&#39;s keyframes.</param>
    public record AnimationEffectType(
      [property: Newtonsoft.Json.JsonProperty("delay")]
      double Delay,
      [property: Newtonsoft.Json.JsonProperty("endDelay")]
      double EndDelay,
      [property: Newtonsoft.Json.JsonProperty("iterationStart")]
      double IterationStart,
      [property: Newtonsoft.Json.JsonProperty("iterations")]
      double Iterations,
      [property: Newtonsoft.Json.JsonProperty("duration")]
      double Duration,
      [property: Newtonsoft.Json.JsonProperty("direction")]
      string Direction,
      [property: Newtonsoft.Json.JsonProperty("fill")]
      string Fill,
      [property: Newtonsoft.Json.JsonProperty("easing")]
      string Easing,
      [property: Newtonsoft.Json.JsonProperty("backendNodeId")]
      ChromeProtocol.Domains.DOM.BackendNodeIdType? BackendNodeId = default,
      [property: Newtonsoft.Json.JsonProperty("keyframesRule")]
      ChromeProtocol.Domains.Animation.KeyframesRuleType? KeyframesRule = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Keyframes Rule</summary>
    /// <param name="Keyframes">List of animation keyframes.</param>
    /// <param name="Name">CSS keyframed animation&#39;s name.</param>
    public record KeyframesRuleType(
      [property: Newtonsoft.Json.JsonProperty("keyframes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.Animation.KeyframeStyleType> Keyframes,
      [property: Newtonsoft.Json.JsonProperty("name")]
      string? Name = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Keyframe Style</summary>
    /// <param name="Offset">Keyframe&#39;s time offset.</param>
    /// <param name="Easing">`AnimationEffect`&#39;s timing function.</param>
    public record KeyframeStyleType(
      [property: Newtonsoft.Json.JsonProperty("offset")]
      string Offset,
      [property: Newtonsoft.Json.JsonProperty("easing")]
      string Easing
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Event for when an animation has been cancelled.</summary>
    /// <param name="Id">Id of the animation that was cancelled.</param>
    [ChromeProtocol.Core.MethodName("Animation.animationCanceled")]
    public record AnimationCanceled(
      [property: Newtonsoft.Json.JsonProperty("id")]
      string Id
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Event for each animation that has been created.</summary>
    /// <param name="Id">Id of the animation that was created.</param>
    [ChromeProtocol.Core.MethodName("Animation.animationCreated")]
    public record AnimationCreated(
      [property: Newtonsoft.Json.JsonProperty("id")]
      string Id
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Event for animation that has been started.</summary>
    /// <param name="Animation">Animation that was started.</param>
    [ChromeProtocol.Core.MethodName("Animation.animationStarted")]
    public record AnimationStarted(
      [property: Newtonsoft.Json.JsonProperty("animation")]
      ChromeProtocol.Domains.Animation.AnimationType Animation
    ) : ChromeProtocol.Core.IEvent
    {
    }
    /// <summary>Disables animation domain notifications.</summary>
    public static ChromeProtocol.Domains.Animation.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.Animation.DisableRequest();
    }
    /// <summary>Disables animation domain notifications.</summary>
    [ChromeProtocol.Core.MethodName("Animation.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables animation domain notifications.</summary>
    public static ChromeProtocol.Domains.Animation.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.Animation.EnableRequest();
    }
    /// <summary>Enables animation domain notifications.</summary>
    [ChromeProtocol.Core.MethodName("Animation.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Returns the current time of the an animation.</summary>
    /// <param name="Id">Id of animation.</param>
    public static ChromeProtocol.Domains.Animation.GetCurrentTimeRequest GetCurrentTime(string Id)    
    {
      return new ChromeProtocol.Domains.Animation.GetCurrentTimeRequest(Id);
    }
    /// <summary>Returns the current time of the an animation.</summary>
    /// <param name="Id">Id of animation.</param>
    [ChromeProtocol.Core.MethodName("Animation.getCurrentTime")]
    public record GetCurrentTimeRequest(
      [property: Newtonsoft.Json.JsonProperty("id")]
      string Id
    ) : ChromeProtocol.Core.ICommand<GetCurrentTimeRequestResult>
    {
    }
    /// <param name="CurrentTime">Current time of the page.</param>
    public record GetCurrentTimeRequestResult(
      [property: Newtonsoft.Json.JsonProperty("currentTime")]
      double CurrentTime
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Gets the playback rate of the document timeline.</summary>
    public static ChromeProtocol.Domains.Animation.GetPlaybackRateRequest GetPlaybackRate()    
    {
      return new ChromeProtocol.Domains.Animation.GetPlaybackRateRequest();
    }
    /// <summary>Gets the playback rate of the document timeline.</summary>
    [ChromeProtocol.Core.MethodName("Animation.getPlaybackRate")]
    public record GetPlaybackRateRequest() : ChromeProtocol.Core.ICommand<GetPlaybackRateRequestResult>
    {
    }
    /// <param name="PlaybackRate">Playback rate for animations on page.</param>
    public record GetPlaybackRateRequestResult(
      [property: Newtonsoft.Json.JsonProperty("playbackRate")]
      double PlaybackRate
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Releases a set of animations to no longer be manipulated.</summary>
    /// <param name="Animations">List of animation ids to seek.</param>
    public static ChromeProtocol.Domains.Animation.ReleaseAnimationsRequest ReleaseAnimations(System.Collections.Generic.IReadOnlyList<string> Animations)    
    {
      return new ChromeProtocol.Domains.Animation.ReleaseAnimationsRequest(Animations);
    }
    /// <summary>Releases a set of animations to no longer be manipulated.</summary>
    /// <param name="Animations">List of animation ids to seek.</param>
    [ChromeProtocol.Core.MethodName("Animation.releaseAnimations")]
    public record ReleaseAnimationsRequest(
      [property: Newtonsoft.Json.JsonProperty("animations")]
      System.Collections.Generic.IReadOnlyList<string> Animations
    ) : ChromeProtocol.Core.ICommand<ReleaseAnimationsRequestResult>
    {
    }
    public record ReleaseAnimationsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Gets the remote object of the Animation.</summary>
    /// <param name="AnimationId">Animation id.</param>
    public static ChromeProtocol.Domains.Animation.ResolveAnimationRequest ResolveAnimation(string AnimationId)    
    {
      return new ChromeProtocol.Domains.Animation.ResolveAnimationRequest(AnimationId);
    }
    /// <summary>Gets the remote object of the Animation.</summary>
    /// <param name="AnimationId">Animation id.</param>
    [ChromeProtocol.Core.MethodName("Animation.resolveAnimation")]
    public record ResolveAnimationRequest(
      [property: Newtonsoft.Json.JsonProperty("animationId")]
      string AnimationId
    ) : ChromeProtocol.Core.ICommand<ResolveAnimationRequestResult>
    {
    }
    /// <param name="RemoteObject">Corresponding remote object.</param>
    public record ResolveAnimationRequestResult(
      [property: Newtonsoft.Json.JsonProperty("remoteObject")]
      ChromeProtocol.Domains.Runtime.RemoteObjectType RemoteObject
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Seek a set of animations to a particular time within each animation.</summary>
    /// <param name="Animations">List of animation ids to seek.</param>
    /// <param name="CurrentTime">Set the current time of each animation.</param>
    public static ChromeProtocol.Domains.Animation.SeekAnimationsRequest SeekAnimations(System.Collections.Generic.IReadOnlyList<string> Animations, double CurrentTime)    
    {
      return new ChromeProtocol.Domains.Animation.SeekAnimationsRequest(Animations, CurrentTime);
    }
    /// <summary>Seek a set of animations to a particular time within each animation.</summary>
    /// <param name="Animations">List of animation ids to seek.</param>
    /// <param name="CurrentTime">Set the current time of each animation.</param>
    [ChromeProtocol.Core.MethodName("Animation.seekAnimations")]
    public record SeekAnimationsRequest(
      [property: Newtonsoft.Json.JsonProperty("animations")]
      System.Collections.Generic.IReadOnlyList<string> Animations,
      [property: Newtonsoft.Json.JsonProperty("currentTime")]
      double CurrentTime
    ) : ChromeProtocol.Core.ICommand<SeekAnimationsRequestResult>
    {
    }
    public record SeekAnimationsRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sets the paused state of a set of animations.</summary>
    /// <param name="Animations">Animations to set the pause state of.</param>
    /// <param name="Paused">Paused state to set to.</param>
    public static ChromeProtocol.Domains.Animation.SetPausedRequest SetPaused(System.Collections.Generic.IReadOnlyList<string> Animations, bool Paused)    
    {
      return new ChromeProtocol.Domains.Animation.SetPausedRequest(Animations, Paused);
    }
    /// <summary>Sets the paused state of a set of animations.</summary>
    /// <param name="Animations">Animations to set the pause state of.</param>
    /// <param name="Paused">Paused state to set to.</param>
    [ChromeProtocol.Core.MethodName("Animation.setPaused")]
    public record SetPausedRequest(
      [property: Newtonsoft.Json.JsonProperty("animations")]
      System.Collections.Generic.IReadOnlyList<string> Animations,
      [property: Newtonsoft.Json.JsonProperty("paused")]
      bool Paused
    ) : ChromeProtocol.Core.ICommand<SetPausedRequestResult>
    {
    }
    public record SetPausedRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sets the playback rate of the document timeline.</summary>
    /// <param name="PlaybackRate">Playback rate for animations on page</param>
    public static ChromeProtocol.Domains.Animation.SetPlaybackRateRequest SetPlaybackRate(double PlaybackRate)    
    {
      return new ChromeProtocol.Domains.Animation.SetPlaybackRateRequest(PlaybackRate);
    }
    /// <summary>Sets the playback rate of the document timeline.</summary>
    /// <param name="PlaybackRate">Playback rate for animations on page</param>
    [ChromeProtocol.Core.MethodName("Animation.setPlaybackRate")]
    public record SetPlaybackRateRequest(
      [property: Newtonsoft.Json.JsonProperty("playbackRate")]
      double PlaybackRate
    ) : ChromeProtocol.Core.ICommand<SetPlaybackRateRequestResult>
    {
    }
    public record SetPlaybackRateRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Sets the timing of an animation node.</summary>
    /// <param name="AnimationId">Animation id.</param>
    /// <param name="Duration">Duration of the animation.</param>
    /// <param name="Delay">Delay of the animation.</param>
    public static ChromeProtocol.Domains.Animation.SetTimingRequest SetTiming(string AnimationId, double Duration, double Delay)    
    {
      return new ChromeProtocol.Domains.Animation.SetTimingRequest(AnimationId, Duration, Delay);
    }
    /// <summary>Sets the timing of an animation node.</summary>
    /// <param name="AnimationId">Animation id.</param>
    /// <param name="Duration">Duration of the animation.</param>
    /// <param name="Delay">Delay of the animation.</param>
    [ChromeProtocol.Core.MethodName("Animation.setTiming")]
    public record SetTimingRequest(
      [property: Newtonsoft.Json.JsonProperty("animationId")]
      string AnimationId,
      [property: Newtonsoft.Json.JsonProperty("duration")]
      double Duration,
      [property: Newtonsoft.Json.JsonProperty("delay")]
      double Delay
    ) : ChromeProtocol.Core.ICommand<SetTimingRequestResult>
    {
    }
    public record SetTimingRequestResult() : ChromeProtocol.Core.IType
    {
    }
  }
}
