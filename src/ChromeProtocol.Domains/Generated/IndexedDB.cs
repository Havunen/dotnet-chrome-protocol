// <auto-generated />
#nullable enable

namespace ChromeProtocol.Domains
{
  public static partial class IndexedDB
  {
    /// <summary>Database with an array of object stores.</summary>
    /// <param name="Name">Database name.</param>
    /// <param name="Version">
    /// Database version (type is not &#39;integer&#39;, as the standard<br/>
    /// requires the version number to be &#39;unsigned long long&#39;)<br/>
    /// </param>
    /// <param name="ObjectStores">Object stores in this database.</param>
    public record DatabaseWithObjectStoresType(
      [property: Newtonsoft.Json.JsonProperty("name")]
      string Name,
      [property: Newtonsoft.Json.JsonProperty("version")]
      double Version,
      [property: Newtonsoft.Json.JsonProperty("objectStores")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.IndexedDB.ObjectStoreType> ObjectStores
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Object store.</summary>
    /// <param name="Name">Object store name.</param>
    /// <param name="KeyPath">Object store key path.</param>
    /// <param name="AutoIncrement">If true, object store has auto increment flag set.</param>
    /// <param name="Indexes">Indexes in this object store.</param>
    public record ObjectStoreType(
      [property: Newtonsoft.Json.JsonProperty("name")]
      string Name,
      [property: Newtonsoft.Json.JsonProperty("keyPath")]
      ChromeProtocol.Domains.IndexedDB.KeyPathType KeyPath,
      [property: Newtonsoft.Json.JsonProperty("autoIncrement")]
      bool AutoIncrement,
      [property: Newtonsoft.Json.JsonProperty("indexes")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.IndexedDB.ObjectStoreIndexType> Indexes
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Object store index.</summary>
    /// <param name="Name">Index name.</param>
    /// <param name="KeyPath">Index key path.</param>
    /// <param name="Unique">If true, index is unique.</param>
    /// <param name="MultiEntry">If true, index allows multiple entries for a key.</param>
    public record ObjectStoreIndexType(
      [property: Newtonsoft.Json.JsonProperty("name")]
      string Name,
      [property: Newtonsoft.Json.JsonProperty("keyPath")]
      ChromeProtocol.Domains.IndexedDB.KeyPathType KeyPath,
      [property: Newtonsoft.Json.JsonProperty("unique")]
      bool Unique,
      [property: Newtonsoft.Json.JsonProperty("multiEntry")]
      bool MultiEntry
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Key.</summary>
    /// <param name="Type">Key type.</param>
    /// <param name="Number">Number value.</param>
    /// <param name="String">String value.</param>
    /// <param name="Date">Date value.</param>
    /// <param name="Array">Array value.</param>
    public record KeyType(
      [property: Newtonsoft.Json.JsonProperty("type")]
      string Type,
      [property: Newtonsoft.Json.JsonProperty("number")]
      double? Number = default,
      [property: Newtonsoft.Json.JsonProperty("string")]
      string? String = default,
      [property: Newtonsoft.Json.JsonProperty("date")]
      double? Date = default,
      [property: Newtonsoft.Json.JsonProperty("array")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.IndexedDB.KeyType>? Array = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Key range.</summary>
    /// <param name="LowerOpen">If true lower bound is open.</param>
    /// <param name="UpperOpen">If true upper bound is open.</param>
    /// <param name="Lower">Lower bound.</param>
    /// <param name="Upper">Upper bound.</param>
    public record KeyRangeType(
      [property: Newtonsoft.Json.JsonProperty("lowerOpen")]
      bool LowerOpen,
      [property: Newtonsoft.Json.JsonProperty("upperOpen")]
      bool UpperOpen,
      [property: Newtonsoft.Json.JsonProperty("lower")]
      ChromeProtocol.Domains.IndexedDB.KeyType? Lower = default,
      [property: Newtonsoft.Json.JsonProperty("upper")]
      ChromeProtocol.Domains.IndexedDB.KeyType? Upper = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Data entry.</summary>
    /// <param name="Key">Key object.</param>
    /// <param name="PrimaryKey">Primary key object.</param>
    /// <param name="Value">Value object.</param>
    public record DataEntryType(
      [property: Newtonsoft.Json.JsonProperty("key")]
      ChromeProtocol.Domains.Runtime.RemoteObjectType Key,
      [property: Newtonsoft.Json.JsonProperty("primaryKey")]
      ChromeProtocol.Domains.Runtime.RemoteObjectType PrimaryKey,
      [property: Newtonsoft.Json.JsonProperty("value")]
      ChromeProtocol.Domains.Runtime.RemoteObjectType Value
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Key path.</summary>
    /// <param name="Type">Key path type.</param>
    /// <param name="String">String value.</param>
    /// <param name="Array">Array value.</param>
    public record KeyPathType(
      [property: Newtonsoft.Json.JsonProperty("type")]
      string Type,
      [property: Newtonsoft.Json.JsonProperty("string")]
      string? String = default,
      [property: Newtonsoft.Json.JsonProperty("array")]
      System.Collections.Generic.IReadOnlyList<string>? Array = default
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Clears all entries from an object store.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="ObjectStoreName">Object store name.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    public static ChromeProtocol.Domains.IndexedDB.ClearObjectStoreRequest ClearObjectStore(string DatabaseName, string ObjectStoreName, string? SecurityOrigin = default, string? StorageKey = default, ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default)    
    {
      return new ChromeProtocol.Domains.IndexedDB.ClearObjectStoreRequest(DatabaseName, ObjectStoreName, SecurityOrigin, StorageKey, StorageBucket);
    }
    /// <summary>Clears all entries from an object store.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="ObjectStoreName">Object store name.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    [ChromeProtocol.Core.MethodName("IndexedDB.clearObjectStore")]
    public record ClearObjectStoreRequest(
      [property: Newtonsoft.Json.JsonProperty("databaseName")]
      string DatabaseName,
      [property: Newtonsoft.Json.JsonProperty("objectStoreName")]
      string ObjectStoreName,
      [property: Newtonsoft.Json.JsonProperty("securityOrigin")]
      string? SecurityOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string? StorageKey = default,
      [property: Newtonsoft.Json.JsonProperty("storageBucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default
    ) : ChromeProtocol.Core.ICommand<ClearObjectStoreRequestResult>
    {
    }
    public record ClearObjectStoreRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Deletes a database.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    public static ChromeProtocol.Domains.IndexedDB.DeleteDatabaseRequest DeleteDatabase(string DatabaseName, string? SecurityOrigin = default, string? StorageKey = default, ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default)    
    {
      return new ChromeProtocol.Domains.IndexedDB.DeleteDatabaseRequest(DatabaseName, SecurityOrigin, StorageKey, StorageBucket);
    }
    /// <summary>Deletes a database.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    [ChromeProtocol.Core.MethodName("IndexedDB.deleteDatabase")]
    public record DeleteDatabaseRequest(
      [property: Newtonsoft.Json.JsonProperty("databaseName")]
      string DatabaseName,
      [property: Newtonsoft.Json.JsonProperty("securityOrigin")]
      string? SecurityOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string? StorageKey = default,
      [property: Newtonsoft.Json.JsonProperty("storageBucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default
    ) : ChromeProtocol.Core.ICommand<DeleteDatabaseRequestResult>
    {
    }
    public record DeleteDatabaseRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Delete a range of entries from an object store</summary>
    /// <param name="KeyRange">Range of entry keys to delete</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    public static ChromeProtocol.Domains.IndexedDB.DeleteObjectStoreEntriesRequest DeleteObjectStoreEntries(string DatabaseName, string ObjectStoreName, ChromeProtocol.Domains.IndexedDB.KeyRangeType KeyRange, string? SecurityOrigin = default, string? StorageKey = default, ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default)    
    {
      return new ChromeProtocol.Domains.IndexedDB.DeleteObjectStoreEntriesRequest(DatabaseName, ObjectStoreName, KeyRange, SecurityOrigin, StorageKey, StorageBucket);
    }
    /// <summary>Delete a range of entries from an object store</summary>
    /// <param name="KeyRange">Range of entry keys to delete</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    [ChromeProtocol.Core.MethodName("IndexedDB.deleteObjectStoreEntries")]
    public record DeleteObjectStoreEntriesRequest(
      [property: Newtonsoft.Json.JsonProperty("databaseName")]
      string DatabaseName,
      [property: Newtonsoft.Json.JsonProperty("objectStoreName")]
      string ObjectStoreName,
      [property: Newtonsoft.Json.JsonProperty("keyRange")]
      ChromeProtocol.Domains.IndexedDB.KeyRangeType KeyRange,
      [property: Newtonsoft.Json.JsonProperty("securityOrigin")]
      string? SecurityOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string? StorageKey = default,
      [property: Newtonsoft.Json.JsonProperty("storageBucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default
    ) : ChromeProtocol.Core.ICommand<DeleteObjectStoreEntriesRequestResult>
    {
    }
    public record DeleteObjectStoreEntriesRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Disables events from backend.</summary>
    public static ChromeProtocol.Domains.IndexedDB.DisableRequest Disable()    
    {
      return new ChromeProtocol.Domains.IndexedDB.DisableRequest();
    }
    /// <summary>Disables events from backend.</summary>
    [ChromeProtocol.Core.MethodName("IndexedDB.disable")]
    public record DisableRequest() : ChromeProtocol.Core.ICommand<DisableRequestResult>
    {
    }
    public record DisableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Enables events from backend.</summary>
    public static ChromeProtocol.Domains.IndexedDB.EnableRequest Enable()    
    {
      return new ChromeProtocol.Domains.IndexedDB.EnableRequest();
    }
    /// <summary>Enables events from backend.</summary>
    [ChromeProtocol.Core.MethodName("IndexedDB.enable")]
    public record EnableRequest() : ChromeProtocol.Core.ICommand<EnableRequestResult>
    {
    }
    public record EnableRequestResult() : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests data from object store or index.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="ObjectStoreName">Object store name.</param>
    /// <param name="IndexName">Index name, empty string for object store data requests.</param>
    /// <param name="SkipCount">Number of records to skip.</param>
    /// <param name="PageSize">Number of records to fetch.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    /// <param name="KeyRange">Key range.</param>
    public static ChromeProtocol.Domains.IndexedDB.RequestDataRequest RequestData(string DatabaseName, string ObjectStoreName, string IndexName, int SkipCount, int PageSize, string? SecurityOrigin = default, string? StorageKey = default, ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default, ChromeProtocol.Domains.IndexedDB.KeyRangeType? KeyRange = default)    
    {
      return new ChromeProtocol.Domains.IndexedDB.RequestDataRequest(DatabaseName, ObjectStoreName, IndexName, SkipCount, PageSize, SecurityOrigin, StorageKey, StorageBucket, KeyRange);
    }
    /// <summary>Requests data from object store or index.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="ObjectStoreName">Object store name.</param>
    /// <param name="IndexName">Index name, empty string for object store data requests.</param>
    /// <param name="SkipCount">Number of records to skip.</param>
    /// <param name="PageSize">Number of records to fetch.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    /// <param name="KeyRange">Key range.</param>
    [ChromeProtocol.Core.MethodName("IndexedDB.requestData")]
    public record RequestDataRequest(
      [property: Newtonsoft.Json.JsonProperty("databaseName")]
      string DatabaseName,
      [property: Newtonsoft.Json.JsonProperty("objectStoreName")]
      string ObjectStoreName,
      [property: Newtonsoft.Json.JsonProperty("indexName")]
      string IndexName,
      [property: Newtonsoft.Json.JsonProperty("skipCount")]
      int SkipCount,
      [property: Newtonsoft.Json.JsonProperty("pageSize")]
      int PageSize,
      [property: Newtonsoft.Json.JsonProperty("securityOrigin")]
      string? SecurityOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string? StorageKey = default,
      [property: Newtonsoft.Json.JsonProperty("storageBucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default,
      [property: Newtonsoft.Json.JsonProperty("keyRange")]
      ChromeProtocol.Domains.IndexedDB.KeyRangeType? KeyRange = default
    ) : ChromeProtocol.Core.ICommand<RequestDataRequestResult>
    {
    }
    /// <param name="ObjectStoreDataEntries">Array of object store data entries.</param>
    /// <param name="HasMore">If true, there are more entries to fetch in the given range.</param>
    public record RequestDataRequestResult(
      [property: Newtonsoft.Json.JsonProperty("objectStoreDataEntries")]
      System.Collections.Generic.IReadOnlyList<ChromeProtocol.Domains.IndexedDB.DataEntryType> ObjectStoreDataEntries,
      [property: Newtonsoft.Json.JsonProperty("hasMore")]
      bool HasMore
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Gets metadata of an object store.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="ObjectStoreName">Object store name.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    public static ChromeProtocol.Domains.IndexedDB.GetMetadataRequest GetMetadata(string DatabaseName, string ObjectStoreName, string? SecurityOrigin = default, string? StorageKey = default, ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default)    
    {
      return new ChromeProtocol.Domains.IndexedDB.GetMetadataRequest(DatabaseName, ObjectStoreName, SecurityOrigin, StorageKey, StorageBucket);
    }
    /// <summary>Gets metadata of an object store.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="ObjectStoreName">Object store name.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    [ChromeProtocol.Core.MethodName("IndexedDB.getMetadata")]
    public record GetMetadataRequest(
      [property: Newtonsoft.Json.JsonProperty("databaseName")]
      string DatabaseName,
      [property: Newtonsoft.Json.JsonProperty("objectStoreName")]
      string ObjectStoreName,
      [property: Newtonsoft.Json.JsonProperty("securityOrigin")]
      string? SecurityOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string? StorageKey = default,
      [property: Newtonsoft.Json.JsonProperty("storageBucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default
    ) : ChromeProtocol.Core.ICommand<GetMetadataRequestResult>
    {
    }
    /// <param name="EntriesCount">the entries count</param>
    /// <param name="KeyGeneratorValue">
    /// the current value of key generator, to become the next inserted<br/>
    /// key into the object store. Valid if objectStore.autoIncrement<br/>
    /// is true.<br/>
    /// </param>
    public record GetMetadataRequestResult(
      [property: Newtonsoft.Json.JsonProperty("entriesCount")]
      double EntriesCount,
      [property: Newtonsoft.Json.JsonProperty("keyGeneratorValue")]
      double KeyGeneratorValue
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests database with given name in given frame.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    public static ChromeProtocol.Domains.IndexedDB.RequestDatabaseRequest RequestDatabase(string DatabaseName, string? SecurityOrigin = default, string? StorageKey = default, ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default)    
    {
      return new ChromeProtocol.Domains.IndexedDB.RequestDatabaseRequest(DatabaseName, SecurityOrigin, StorageKey, StorageBucket);
    }
    /// <summary>Requests database with given name in given frame.</summary>
    /// <param name="DatabaseName">Database name.</param>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    [ChromeProtocol.Core.MethodName("IndexedDB.requestDatabase")]
    public record RequestDatabaseRequest(
      [property: Newtonsoft.Json.JsonProperty("databaseName")]
      string DatabaseName,
      [property: Newtonsoft.Json.JsonProperty("securityOrigin")]
      string? SecurityOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string? StorageKey = default,
      [property: Newtonsoft.Json.JsonProperty("storageBucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default
    ) : ChromeProtocol.Core.ICommand<RequestDatabaseRequestResult>
    {
    }
    /// <param name="DatabaseWithObjectStores">Database with an array of object stores.</param>
    public record RequestDatabaseRequestResult(
      [property: Newtonsoft.Json.JsonProperty("databaseWithObjectStores")]
      ChromeProtocol.Domains.IndexedDB.DatabaseWithObjectStoresType DatabaseWithObjectStores
    ) : ChromeProtocol.Core.IType
    {
    }
    /// <summary>Requests database names for given security origin.</summary>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    public static ChromeProtocol.Domains.IndexedDB.RequestDatabaseNamesRequest RequestDatabaseNames(string? SecurityOrigin = default, string? StorageKey = default, ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default)    
    {
      return new ChromeProtocol.Domains.IndexedDB.RequestDatabaseNamesRequest(SecurityOrigin, StorageKey, StorageBucket);
    }
    /// <summary>Requests database names for given security origin.</summary>
    /// <param name="SecurityOrigin">
    /// At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.<br/>
    /// Security origin.<br/>
    /// </param>
    /// <param name="StorageKey">Storage key.</param>
    /// <param name="StorageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
    [ChromeProtocol.Core.MethodName("IndexedDB.requestDatabaseNames")]
    public record RequestDatabaseNamesRequest(
      [property: Newtonsoft.Json.JsonProperty("securityOrigin")]
      string? SecurityOrigin = default,
      [property: Newtonsoft.Json.JsonProperty("storageKey")]
      string? StorageKey = default,
      [property: Newtonsoft.Json.JsonProperty("storageBucket")]
      ChromeProtocol.Domains.Storage.StorageBucketType? StorageBucket = default
    ) : ChromeProtocol.Core.ICommand<RequestDatabaseNamesRequestResult>
    {
    }
    /// <param name="DatabaseNames">Database names for origin.</param>
    public record RequestDatabaseNamesRequestResult(
      [property: Newtonsoft.Json.JsonProperty("databaseNames")]
      System.Collections.Generic.IReadOnlyList<string> DatabaseNames
    ) : ChromeProtocol.Core.IType
    {
    }
  }
}
